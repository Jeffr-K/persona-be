// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"persona/libs/database/ent/coverletterschema"
	"persona/libs/database/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CoverLetterSchemaUpdate is the builder for updating CoverLetterSchema entities.
type CoverLetterSchemaUpdate struct {
	config
	hooks    []Hook
	mutation *CoverLetterSchemaMutation
}

// Where appends a list predicates to the CoverLetterSchemaUpdate builder.
func (clsu *CoverLetterSchemaUpdate) Where(ps ...predicate.CoverLetterSchema) *CoverLetterSchemaUpdate {
	clsu.mutation.Where(ps...)
	return clsu
}

// Mutation returns the CoverLetterSchemaMutation object of the builder.
func (clsu *CoverLetterSchemaUpdate) Mutation() *CoverLetterSchemaMutation {
	return clsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (clsu *CoverLetterSchemaUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, clsu.sqlSave, clsu.mutation, clsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (clsu *CoverLetterSchemaUpdate) SaveX(ctx context.Context) int {
	affected, err := clsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (clsu *CoverLetterSchemaUpdate) Exec(ctx context.Context) error {
	_, err := clsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clsu *CoverLetterSchemaUpdate) ExecX(ctx context.Context) {
	if err := clsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (clsu *CoverLetterSchemaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(coverletterschema.Table, coverletterschema.Columns, sqlgraph.NewFieldSpec(coverletterschema.FieldID, field.TypeInt))
	if ps := clsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, clsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coverletterschema.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	clsu.mutation.done = true
	return n, nil
}

// CoverLetterSchemaUpdateOne is the builder for updating a single CoverLetterSchema entity.
type CoverLetterSchemaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CoverLetterSchemaMutation
}

// Mutation returns the CoverLetterSchemaMutation object of the builder.
func (clsuo *CoverLetterSchemaUpdateOne) Mutation() *CoverLetterSchemaMutation {
	return clsuo.mutation
}

// Where appends a list predicates to the CoverLetterSchemaUpdate builder.
func (clsuo *CoverLetterSchemaUpdateOne) Where(ps ...predicate.CoverLetterSchema) *CoverLetterSchemaUpdateOne {
	clsuo.mutation.Where(ps...)
	return clsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (clsuo *CoverLetterSchemaUpdateOne) Select(field string, fields ...string) *CoverLetterSchemaUpdateOne {
	clsuo.fields = append([]string{field}, fields...)
	return clsuo
}

// Save executes the query and returns the updated CoverLetterSchema entity.
func (clsuo *CoverLetterSchemaUpdateOne) Save(ctx context.Context) (*CoverLetterSchema, error) {
	return withHooks(ctx, clsuo.sqlSave, clsuo.mutation, clsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (clsuo *CoverLetterSchemaUpdateOne) SaveX(ctx context.Context) *CoverLetterSchema {
	node, err := clsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (clsuo *CoverLetterSchemaUpdateOne) Exec(ctx context.Context) error {
	_, err := clsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clsuo *CoverLetterSchemaUpdateOne) ExecX(ctx context.Context) {
	if err := clsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (clsuo *CoverLetterSchemaUpdateOne) sqlSave(ctx context.Context) (_node *CoverLetterSchema, err error) {
	_spec := sqlgraph.NewUpdateSpec(coverletterschema.Table, coverletterschema.Columns, sqlgraph.NewFieldSpec(coverletterschema.FieldID, field.TypeInt))
	id, ok := clsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CoverLetterSchema.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := clsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coverletterschema.FieldID)
		for _, f := range fields {
			if !coverletterschema.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != coverletterschema.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := clsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &CoverLetterSchema{config: clsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, clsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coverletterschema.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	clsuo.mutation.done = true
	return _node, nil
}
