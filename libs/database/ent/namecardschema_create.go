// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"persona/libs/database/ent/namecardschema"
	"persona/libs/database/ent/userschema"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NamecardSchemaCreate is the builder for creating a NamecardSchema entity.
type NamecardSchemaCreate struct {
	config
	mutation *NamecardSchemaMutation
	hooks    []Hook
}

// SetUserID sets the "user" edge to the UserSchema entity by ID.
func (nsc *NamecardSchemaCreate) SetUserID(id int) *NamecardSchemaCreate {
	nsc.mutation.SetUserID(id)
	return nsc
}

// SetNillableUserID sets the "user" edge to the UserSchema entity by ID if the given value is not nil.
func (nsc *NamecardSchemaCreate) SetNillableUserID(id *int) *NamecardSchemaCreate {
	if id != nil {
		nsc = nsc.SetUserID(*id)
	}
	return nsc
}

// SetUser sets the "user" edge to the UserSchema entity.
func (nsc *NamecardSchemaCreate) SetUser(u *UserSchema) *NamecardSchemaCreate {
	return nsc.SetUserID(u.ID)
}

// Mutation returns the NamecardSchemaMutation object of the builder.
func (nsc *NamecardSchemaCreate) Mutation() *NamecardSchemaMutation {
	return nsc.mutation
}

// Save creates the NamecardSchema in the database.
func (nsc *NamecardSchemaCreate) Save(ctx context.Context) (*NamecardSchema, error) {
	return withHooks(ctx, nsc.sqlSave, nsc.mutation, nsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nsc *NamecardSchemaCreate) SaveX(ctx context.Context) *NamecardSchema {
	v, err := nsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nsc *NamecardSchemaCreate) Exec(ctx context.Context) error {
	_, err := nsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nsc *NamecardSchemaCreate) ExecX(ctx context.Context) {
	if err := nsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nsc *NamecardSchemaCreate) check() error {
	return nil
}

func (nsc *NamecardSchemaCreate) sqlSave(ctx context.Context) (*NamecardSchema, error) {
	if err := nsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	nsc.mutation.id = &_node.ID
	nsc.mutation.done = true
	return _node, nil
}

func (nsc *NamecardSchemaCreate) createSpec() (*NamecardSchema, *sqlgraph.CreateSpec) {
	var (
		_node = &NamecardSchema{config: nsc.config}
		_spec = sqlgraph.NewCreateSpec(namecardschema.Table, sqlgraph.NewFieldSpec(namecardschema.FieldID, field.TypeInt))
	)
	if nodes := nsc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   namecardschema.UserTable,
			Columns: []string{namecardschema.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userschema.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_schema_namecard = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NamecardSchemaCreateBulk is the builder for creating many NamecardSchema entities in bulk.
type NamecardSchemaCreateBulk struct {
	config
	builders []*NamecardSchemaCreate
}

// Save creates the NamecardSchema entities in the database.
func (nscb *NamecardSchemaCreateBulk) Save(ctx context.Context) ([]*NamecardSchema, error) {
	specs := make([]*sqlgraph.CreateSpec, len(nscb.builders))
	nodes := make([]*NamecardSchema, len(nscb.builders))
	mutators := make([]Mutator, len(nscb.builders))
	for i := range nscb.builders {
		func(i int, root context.Context) {
			builder := nscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NamecardSchemaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nscb *NamecardSchemaCreateBulk) SaveX(ctx context.Context) []*NamecardSchema {
	v, err := nscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nscb *NamecardSchemaCreateBulk) Exec(ctx context.Context) error {
	_, err := nscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nscb *NamecardSchemaCreateBulk) ExecX(ctx context.Context) {
	if err := nscb.Exec(ctx); err != nil {
		panic(err)
	}
}
