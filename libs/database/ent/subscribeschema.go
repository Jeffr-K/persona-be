// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"persona/libs/database/ent/subscribeschema"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SubscribeSchema is the model entity for the SubscribeSchema schema.
type SubscribeSchema struct {
	config
	// ID of the ent.
	ID           int `json:"id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubscribeSchema) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscribeschema.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubscribeSchema fields.
func (ss *SubscribeSchema) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscribeschema.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ss.ID = int(value.Int64)
		default:
			ss.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubscribeSchema.
// This includes values selected through modifiers, order, etc.
func (ss *SubscribeSchema) Value(name string) (ent.Value, error) {
	return ss.selectValues.Get(name)
}

// Update returns a builder for updating this SubscribeSchema.
// Note that you need to call SubscribeSchema.Unwrap() before calling this method if this SubscribeSchema
// was returned from a transaction, and the transaction was committed or rolled back.
func (ss *SubscribeSchema) Update() *SubscribeSchemaUpdateOne {
	return NewSubscribeSchemaClient(ss.config).UpdateOne(ss)
}

// Unwrap unwraps the SubscribeSchema entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ss *SubscribeSchema) Unwrap() *SubscribeSchema {
	_tx, ok := ss.config.driver.(*txDriver)
	if !ok {
		panic("ent: SubscribeSchema is not a transactional entity")
	}
	ss.config.driver = _tx.drv
	return ss
}

// String implements the fmt.Stringer.
func (ss *SubscribeSchema) String() string {
	var builder strings.Builder
	builder.WriteString("SubscribeSchema(")
	builder.WriteString(fmt.Sprintf("id=%v", ss.ID))
	builder.WriteByte(')')
	return builder.String()
}

// SubscribeSchemas is a parsable slice of SubscribeSchema.
type SubscribeSchemas []*SubscribeSchema
