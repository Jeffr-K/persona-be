// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"persona/libs/database/ent/personalizationschema"
	"persona/libs/database/ent/predicate"
	"persona/libs/database/ent/userschema"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PersonalizationSchemaUpdate is the builder for updating PersonalizationSchema entities.
type PersonalizationSchemaUpdate struct {
	config
	hooks    []Hook
	mutation *PersonalizationSchemaMutation
}

// Where appends a list predicates to the PersonalizationSchemaUpdate builder.
func (psu *PersonalizationSchemaUpdate) Where(ps ...predicate.PersonalizationSchema) *PersonalizationSchemaUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetUserID sets the "user" edge to the UserSchema entity by ID.
func (psu *PersonalizationSchemaUpdate) SetUserID(id int) *PersonalizationSchemaUpdate {
	psu.mutation.SetUserID(id)
	return psu
}

// SetNillableUserID sets the "user" edge to the UserSchema entity by ID if the given value is not nil.
func (psu *PersonalizationSchemaUpdate) SetNillableUserID(id *int) *PersonalizationSchemaUpdate {
	if id != nil {
		psu = psu.SetUserID(*id)
	}
	return psu
}

// SetUser sets the "user" edge to the UserSchema entity.
func (psu *PersonalizationSchemaUpdate) SetUser(u *UserSchema) *PersonalizationSchemaUpdate {
	return psu.SetUserID(u.ID)
}

// Mutation returns the PersonalizationSchemaMutation object of the builder.
func (psu *PersonalizationSchemaUpdate) Mutation() *PersonalizationSchemaMutation {
	return psu.mutation
}

// ClearUser clears the "user" edge to the UserSchema entity.
func (psu *PersonalizationSchemaUpdate) ClearUser() *PersonalizationSchemaUpdate {
	psu.mutation.ClearUser()
	return psu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *PersonalizationSchemaUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, psu.sqlSave, psu.mutation, psu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psu *PersonalizationSchemaUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *PersonalizationSchemaUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *PersonalizationSchemaUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (psu *PersonalizationSchemaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(personalizationschema.Table, personalizationschema.Columns, sqlgraph.NewFieldSpec(personalizationschema.FieldID, field.TypeInt))
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if psu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   personalizationschema.UserTable,
			Columns: []string{personalizationschema.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userschema.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   personalizationschema.UserTable,
			Columns: []string{personalizationschema.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userschema.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personalizationschema.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psu.mutation.done = true
	return n, nil
}

// PersonalizationSchemaUpdateOne is the builder for updating a single PersonalizationSchema entity.
type PersonalizationSchemaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PersonalizationSchemaMutation
}

// SetUserID sets the "user" edge to the UserSchema entity by ID.
func (psuo *PersonalizationSchemaUpdateOne) SetUserID(id int) *PersonalizationSchemaUpdateOne {
	psuo.mutation.SetUserID(id)
	return psuo
}

// SetNillableUserID sets the "user" edge to the UserSchema entity by ID if the given value is not nil.
func (psuo *PersonalizationSchemaUpdateOne) SetNillableUserID(id *int) *PersonalizationSchemaUpdateOne {
	if id != nil {
		psuo = psuo.SetUserID(*id)
	}
	return psuo
}

// SetUser sets the "user" edge to the UserSchema entity.
func (psuo *PersonalizationSchemaUpdateOne) SetUser(u *UserSchema) *PersonalizationSchemaUpdateOne {
	return psuo.SetUserID(u.ID)
}

// Mutation returns the PersonalizationSchemaMutation object of the builder.
func (psuo *PersonalizationSchemaUpdateOne) Mutation() *PersonalizationSchemaMutation {
	return psuo.mutation
}

// ClearUser clears the "user" edge to the UserSchema entity.
func (psuo *PersonalizationSchemaUpdateOne) ClearUser() *PersonalizationSchemaUpdateOne {
	psuo.mutation.ClearUser()
	return psuo
}

// Where appends a list predicates to the PersonalizationSchemaUpdate builder.
func (psuo *PersonalizationSchemaUpdateOne) Where(ps ...predicate.PersonalizationSchema) *PersonalizationSchemaUpdateOne {
	psuo.mutation.Where(ps...)
	return psuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *PersonalizationSchemaUpdateOne) Select(field string, fields ...string) *PersonalizationSchemaUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated PersonalizationSchema entity.
func (psuo *PersonalizationSchemaUpdateOne) Save(ctx context.Context) (*PersonalizationSchema, error) {
	return withHooks(ctx, psuo.sqlSave, psuo.mutation, psuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *PersonalizationSchemaUpdateOne) SaveX(ctx context.Context) *PersonalizationSchema {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *PersonalizationSchemaUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *PersonalizationSchemaUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (psuo *PersonalizationSchemaUpdateOne) sqlSave(ctx context.Context) (_node *PersonalizationSchema, err error) {
	_spec := sqlgraph.NewUpdateSpec(personalizationschema.Table, personalizationschema.Columns, sqlgraph.NewFieldSpec(personalizationschema.FieldID, field.TypeInt))
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PersonalizationSchema.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, personalizationschema.FieldID)
		for _, f := range fields {
			if !personalizationschema.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != personalizationschema.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if psuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   personalizationschema.UserTable,
			Columns: []string{personalizationschema.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userschema.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   personalizationschema.UserTable,
			Columns: []string{personalizationschema.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userschema.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PersonalizationSchema{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personalizationschema.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psuo.mutation.done = true
	return _node, nil
}
