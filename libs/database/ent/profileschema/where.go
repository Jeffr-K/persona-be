// Code generated by ent, DO NOT EDIT.

package profileschema

import (
	"persona/libs/database/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProfileSchema {
	return predicate.ProfileSchema(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProfileSchema {
	return predicate.ProfileSchema(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProfileSchema {
	return predicate.ProfileSchema(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProfileSchema {
	return predicate.ProfileSchema(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProfileSchema {
	return predicate.ProfileSchema(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProfileSchema {
	return predicate.ProfileSchema(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProfileSchema {
	return predicate.ProfileSchema(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProfileSchema {
	return predicate.ProfileSchema(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProfileSchema {
	return predicate.ProfileSchema(sql.FieldLTE(FieldID, id))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.ProfileSchema {
	return predicate.ProfileSchema(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.UserSchema) predicate.ProfileSchema {
	return predicate.ProfileSchema(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPhoto applies the HasEdge predicate on the "photo" edge.
func HasPhoto() predicate.ProfileSchema {
	return predicate.ProfileSchema(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, PhotoTable, PhotoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPhotoWith applies the HasEdge predicate on the "photo" edge with a given conditions (other predicates).
func HasPhotoWith(preds ...predicate.PhotoSchema) predicate.ProfileSchema {
	return predicate.ProfileSchema(func(s *sql.Selector) {
		step := newPhotoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPhone applies the HasEdge predicate on the "phone" edge.
func HasPhone() predicate.ProfileSchema {
	return predicate.ProfileSchema(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, PhoneTable, PhoneColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPhoneWith applies the HasEdge predicate on the "phone" edge with a given conditions (other predicates).
func HasPhoneWith(preds ...predicate.PhoneSchema) predicate.ProfileSchema {
	return predicate.ProfileSchema(func(s *sql.Selector) {
		step := newPhoneStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProfileSchema) predicate.ProfileSchema {
	return predicate.ProfileSchema(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProfileSchema) predicate.ProfileSchema {
	return predicate.ProfileSchema(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProfileSchema) predicate.ProfileSchema {
	return predicate.ProfileSchema(func(s *sql.Selector) {
		p(s.Not())
	})
}
