// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"persona/libs/database/ent/imageschema"
	"persona/libs/database/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ImageSchemaUpdate is the builder for updating ImageSchema entities.
type ImageSchemaUpdate struct {
	config
	hooks    []Hook
	mutation *ImageSchemaMutation
}

// Where appends a list predicates to the ImageSchemaUpdate builder.
func (isu *ImageSchemaUpdate) Where(ps ...predicate.ImageSchema) *ImageSchemaUpdate {
	isu.mutation.Where(ps...)
	return isu
}

// Mutation returns the ImageSchemaMutation object of the builder.
func (isu *ImageSchemaUpdate) Mutation() *ImageSchemaMutation {
	return isu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (isu *ImageSchemaUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, isu.sqlSave, isu.mutation, isu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (isu *ImageSchemaUpdate) SaveX(ctx context.Context) int {
	affected, err := isu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (isu *ImageSchemaUpdate) Exec(ctx context.Context) error {
	_, err := isu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (isu *ImageSchemaUpdate) ExecX(ctx context.Context) {
	if err := isu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (isu *ImageSchemaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(imageschema.Table, imageschema.Columns, sqlgraph.NewFieldSpec(imageschema.FieldID, field.TypeInt))
	if ps := isu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, isu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{imageschema.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	isu.mutation.done = true
	return n, nil
}

// ImageSchemaUpdateOne is the builder for updating a single ImageSchema entity.
type ImageSchemaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImageSchemaMutation
}

// Mutation returns the ImageSchemaMutation object of the builder.
func (isuo *ImageSchemaUpdateOne) Mutation() *ImageSchemaMutation {
	return isuo.mutation
}

// Where appends a list predicates to the ImageSchemaUpdate builder.
func (isuo *ImageSchemaUpdateOne) Where(ps ...predicate.ImageSchema) *ImageSchemaUpdateOne {
	isuo.mutation.Where(ps...)
	return isuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (isuo *ImageSchemaUpdateOne) Select(field string, fields ...string) *ImageSchemaUpdateOne {
	isuo.fields = append([]string{field}, fields...)
	return isuo
}

// Save executes the query and returns the updated ImageSchema entity.
func (isuo *ImageSchemaUpdateOne) Save(ctx context.Context) (*ImageSchema, error) {
	return withHooks(ctx, isuo.sqlSave, isuo.mutation, isuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (isuo *ImageSchemaUpdateOne) SaveX(ctx context.Context) *ImageSchema {
	node, err := isuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (isuo *ImageSchemaUpdateOne) Exec(ctx context.Context) error {
	_, err := isuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (isuo *ImageSchemaUpdateOne) ExecX(ctx context.Context) {
	if err := isuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (isuo *ImageSchemaUpdateOne) sqlSave(ctx context.Context) (_node *ImageSchema, err error) {
	_spec := sqlgraph.NewUpdateSpec(imageschema.Table, imageschema.Columns, sqlgraph.NewFieldSpec(imageschema.FieldID, field.TypeInt))
	id, ok := isuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ImageSchema.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := isuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, imageschema.FieldID)
		for _, f := range fields {
			if !imageschema.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != imageschema.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := isuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &ImageSchema{config: isuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, isuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{imageschema.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	isuo.mutation.done = true
	return _node, nil
}
