// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"persona/libs/database/ent/imageschema"
	"persona/libs/database/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ImageSchemaDelete is the builder for deleting a ImageSchema entity.
type ImageSchemaDelete struct {
	config
	hooks    []Hook
	mutation *ImageSchemaMutation
}

// Where appends a list predicates to the ImageSchemaDelete builder.
func (isd *ImageSchemaDelete) Where(ps ...predicate.ImageSchema) *ImageSchemaDelete {
	isd.mutation.Where(ps...)
	return isd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (isd *ImageSchemaDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, isd.sqlExec, isd.mutation, isd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (isd *ImageSchemaDelete) ExecX(ctx context.Context) int {
	n, err := isd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (isd *ImageSchemaDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(imageschema.Table, sqlgraph.NewFieldSpec(imageschema.FieldID, field.TypeInt))
	if ps := isd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, isd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	isd.mutation.done = true
	return affected, err
}

// ImageSchemaDeleteOne is the builder for deleting a single ImageSchema entity.
type ImageSchemaDeleteOne struct {
	isd *ImageSchemaDelete
}

// Where appends a list predicates to the ImageSchemaDelete builder.
func (isdo *ImageSchemaDeleteOne) Where(ps ...predicate.ImageSchema) *ImageSchemaDeleteOne {
	isdo.isd.mutation.Where(ps...)
	return isdo
}

// Exec executes the deletion query.
func (isdo *ImageSchemaDeleteOne) Exec(ctx context.Context) error {
	n, err := isdo.isd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{imageschema.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (isdo *ImageSchemaDeleteOne) ExecX(ctx context.Context) {
	if err := isdo.Exec(ctx); err != nil {
		panic(err)
	}
}
