// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"persona/libs/database/ent/followschema"
	"persona/libs/database/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FollowSchemaDelete is the builder for deleting a FollowSchema entity.
type FollowSchemaDelete struct {
	config
	hooks    []Hook
	mutation *FollowSchemaMutation
}

// Where appends a list predicates to the FollowSchemaDelete builder.
func (fsd *FollowSchemaDelete) Where(ps ...predicate.FollowSchema) *FollowSchemaDelete {
	fsd.mutation.Where(ps...)
	return fsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fsd *FollowSchemaDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, fsd.sqlExec, fsd.mutation, fsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (fsd *FollowSchemaDelete) ExecX(ctx context.Context) int {
	n, err := fsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fsd *FollowSchemaDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(followschema.Table, sqlgraph.NewFieldSpec(followschema.FieldID, field.TypeInt))
	if ps := fsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, fsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	fsd.mutation.done = true
	return affected, err
}

// FollowSchemaDeleteOne is the builder for deleting a single FollowSchema entity.
type FollowSchemaDeleteOne struct {
	fsd *FollowSchemaDelete
}

// Where appends a list predicates to the FollowSchemaDelete builder.
func (fsdo *FollowSchemaDeleteOne) Where(ps ...predicate.FollowSchema) *FollowSchemaDeleteOne {
	fsdo.fsd.mutation.Where(ps...)
	return fsdo
}

// Exec executes the deletion query.
func (fsdo *FollowSchemaDeleteOne) Exec(ctx context.Context) error {
	n, err := fsdo.fsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{followschema.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (fsdo *FollowSchemaDeleteOne) ExecX(ctx context.Context) {
	if err := fsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
