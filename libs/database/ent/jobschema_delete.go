// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"persona/libs/database/ent/jobschema"
	"persona/libs/database/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobSchemaDelete is the builder for deleting a JobSchema entity.
type JobSchemaDelete struct {
	config
	hooks    []Hook
	mutation *JobSchemaMutation
}

// Where appends a list predicates to the JobSchemaDelete builder.
func (jsd *JobSchemaDelete) Where(ps ...predicate.JobSchema) *JobSchemaDelete {
	jsd.mutation.Where(ps...)
	return jsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (jsd *JobSchemaDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, jsd.sqlExec, jsd.mutation, jsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (jsd *JobSchemaDelete) ExecX(ctx context.Context) int {
	n, err := jsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (jsd *JobSchemaDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(jobschema.Table, sqlgraph.NewFieldSpec(jobschema.FieldID, field.TypeInt))
	if ps := jsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, jsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	jsd.mutation.done = true
	return affected, err
}

// JobSchemaDeleteOne is the builder for deleting a single JobSchema entity.
type JobSchemaDeleteOne struct {
	jsd *JobSchemaDelete
}

// Where appends a list predicates to the JobSchemaDelete builder.
func (jsdo *JobSchemaDeleteOne) Where(ps ...predicate.JobSchema) *JobSchemaDeleteOne {
	jsdo.jsd.mutation.Where(ps...)
	return jsdo
}

// Exec executes the deletion query.
func (jsdo *JobSchemaDeleteOne) Exec(ctx context.Context) error {
	n, err := jsdo.jsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{jobschema.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (jsdo *JobSchemaDeleteOne) ExecX(ctx context.Context) {
	if err := jsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
