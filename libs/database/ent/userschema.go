// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"persona/libs/database/ent/followschema"
	"persona/libs/database/ent/namecardschema"
	"persona/libs/database/ent/personalizationschema"
	"persona/libs/database/ent/profileschema"
	"persona/libs/database/ent/referrerschema"
	"persona/libs/database/ent/userschema"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// UserSchema is the model entity for the UserSchema schema.
type UserSchema struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID
	UUID uuid.UUID `json:"uuid,omitempty"`
	// 사용자 이름
	Username string `json:"username,omitempty"`
	// 사용자 비밀번호
	Password string `json:"password,omitempty"`
	// 사용자 이메일
	Email string `json:"email,omitempty"`
	// 사용자 등록 일시
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// 사용자 수정 일시
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserSchemaQuery when eager-loading is set.
	Edges              UserSchemaEdges `json:"edges"`
	user_schema_follow *int
	selectValues       sql.SelectValues
}

// UserSchemaEdges holds the relations/edges for other nodes in the graph.
type UserSchemaEdges struct {
	// Roles holds the value of the roles edge.
	Roles []*RoleSchema `json:"roles,omitempty"`
	// Profile holds the value of the profile edge.
	Profile *ProfileSchema `json:"profile,omitempty"`
	// Follow holds the value of the follow edge.
	Follow *FollowSchema `json:"follow,omitempty"`
	// Referrer holds the value of the referrer edge.
	Referrer *ReferrerSchema `json:"referrer,omitempty"`
	// Personalization holds the value of the personalization edge.
	Personalization *PersonalizationSchema `json:"personalization,omitempty"`
	// Namecard holds the value of the namecard edge.
	Namecard *NamecardSchema `json:"namecard,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading.
func (e UserSchemaEdges) RolesOrErr() ([]*RoleSchema, error) {
	if e.loadedTypes[0] {
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserSchemaEdges) ProfileOrErr() (*ProfileSchema, error) {
	if e.loadedTypes[1] {
		if e.Profile == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: profileschema.Label}
		}
		return e.Profile, nil
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// FollowOrErr returns the Follow value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserSchemaEdges) FollowOrErr() (*FollowSchema, error) {
	if e.loadedTypes[2] {
		if e.Follow == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: followschema.Label}
		}
		return e.Follow, nil
	}
	return nil, &NotLoadedError{edge: "follow"}
}

// ReferrerOrErr returns the Referrer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserSchemaEdges) ReferrerOrErr() (*ReferrerSchema, error) {
	if e.loadedTypes[3] {
		if e.Referrer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: referrerschema.Label}
		}
		return e.Referrer, nil
	}
	return nil, &NotLoadedError{edge: "referrer"}
}

// PersonalizationOrErr returns the Personalization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserSchemaEdges) PersonalizationOrErr() (*PersonalizationSchema, error) {
	if e.loadedTypes[4] {
		if e.Personalization == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: personalizationschema.Label}
		}
		return e.Personalization, nil
	}
	return nil, &NotLoadedError{edge: "personalization"}
}

// NamecardOrErr returns the Namecard value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserSchemaEdges) NamecardOrErr() (*NamecardSchema, error) {
	if e.loadedTypes[5] {
		if e.Namecard == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: namecardschema.Label}
		}
		return e.Namecard, nil
	}
	return nil, &NotLoadedError{edge: "namecard"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserSchema) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userschema.FieldID:
			values[i] = new(sql.NullInt64)
		case userschema.FieldUsername, userschema.FieldPassword, userschema.FieldEmail:
			values[i] = new(sql.NullString)
		case userschema.FieldCreatedAt, userschema.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case userschema.FieldUUID:
			values[i] = new(uuid.UUID)
		case userschema.ForeignKeys[0]: // user_schema_follow
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserSchema fields.
func (us *UserSchema) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userschema.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			us.ID = int(value.Int64)
		case userschema.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				us.UUID = *value
			}
		case userschema.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				us.Username = value.String
			}
		case userschema.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				us.Password = value.String
			}
		case userschema.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				us.Email = value.String
			}
		case userschema.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				us.CreatedAt = value.Time
			}
		case userschema.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				us.UpdatedAt = value.Time
			}
		case userschema.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_schema_follow", value)
			} else if value.Valid {
				us.user_schema_follow = new(int)
				*us.user_schema_follow = int(value.Int64)
			}
		default:
			us.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserSchema.
// This includes values selected through modifiers, order, etc.
func (us *UserSchema) Value(name string) (ent.Value, error) {
	return us.selectValues.Get(name)
}

// QueryRoles queries the "roles" edge of the UserSchema entity.
func (us *UserSchema) QueryRoles() *RoleSchemaQuery {
	return NewUserSchemaClient(us.config).QueryRoles(us)
}

// QueryProfile queries the "profile" edge of the UserSchema entity.
func (us *UserSchema) QueryProfile() *ProfileSchemaQuery {
	return NewUserSchemaClient(us.config).QueryProfile(us)
}

// QueryFollow queries the "follow" edge of the UserSchema entity.
func (us *UserSchema) QueryFollow() *FollowSchemaQuery {
	return NewUserSchemaClient(us.config).QueryFollow(us)
}

// QueryReferrer queries the "referrer" edge of the UserSchema entity.
func (us *UserSchema) QueryReferrer() *ReferrerSchemaQuery {
	return NewUserSchemaClient(us.config).QueryReferrer(us)
}

// QueryPersonalization queries the "personalization" edge of the UserSchema entity.
func (us *UserSchema) QueryPersonalization() *PersonalizationSchemaQuery {
	return NewUserSchemaClient(us.config).QueryPersonalization(us)
}

// QueryNamecard queries the "namecard" edge of the UserSchema entity.
func (us *UserSchema) QueryNamecard() *NamecardSchemaQuery {
	return NewUserSchemaClient(us.config).QueryNamecard(us)
}

// Update returns a builder for updating this UserSchema.
// Note that you need to call UserSchema.Unwrap() before calling this method if this UserSchema
// was returned from a transaction, and the transaction was committed or rolled back.
func (us *UserSchema) Update() *UserSchemaUpdateOne {
	return NewUserSchemaClient(us.config).UpdateOne(us)
}

// Unwrap unwraps the UserSchema entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (us *UserSchema) Unwrap() *UserSchema {
	_tx, ok := us.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserSchema is not a transactional entity")
	}
	us.config.driver = _tx.drv
	return us
}

// String implements the fmt.Stringer.
func (us *UserSchema) String() string {
	var builder strings.Builder
	builder.WriteString("UserSchema(")
	builder.WriteString(fmt.Sprintf("id=%v, ", us.ID))
	builder.WriteString("uuid=")
	builder.WriteString(fmt.Sprintf("%v", us.UUID))
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(us.Username)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(us.Password)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(us.Email)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(us.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(us.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserSchemas is a parsable slice of UserSchema.
type UserSchemas []*UserSchema
