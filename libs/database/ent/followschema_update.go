// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"persona/libs/database/ent/followschema"
	"persona/libs/database/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FollowSchemaUpdate is the builder for updating FollowSchema entities.
type FollowSchemaUpdate struct {
	config
	hooks    []Hook
	mutation *FollowSchemaMutation
}

// Where appends a list predicates to the FollowSchemaUpdate builder.
func (fsu *FollowSchemaUpdate) Where(ps ...predicate.FollowSchema) *FollowSchemaUpdate {
	fsu.mutation.Where(ps...)
	return fsu
}

// Mutation returns the FollowSchemaMutation object of the builder.
func (fsu *FollowSchemaUpdate) Mutation() *FollowSchemaMutation {
	return fsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fsu *FollowSchemaUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fsu.sqlSave, fsu.mutation, fsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fsu *FollowSchemaUpdate) SaveX(ctx context.Context) int {
	affected, err := fsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fsu *FollowSchemaUpdate) Exec(ctx context.Context) error {
	_, err := fsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsu *FollowSchemaUpdate) ExecX(ctx context.Context) {
	if err := fsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fsu *FollowSchemaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(followschema.Table, followschema.Columns, sqlgraph.NewFieldSpec(followschema.FieldID, field.TypeInt))
	if ps := fsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{followschema.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fsu.mutation.done = true
	return n, nil
}

// FollowSchemaUpdateOne is the builder for updating a single FollowSchema entity.
type FollowSchemaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FollowSchemaMutation
}

// Mutation returns the FollowSchemaMutation object of the builder.
func (fsuo *FollowSchemaUpdateOne) Mutation() *FollowSchemaMutation {
	return fsuo.mutation
}

// Where appends a list predicates to the FollowSchemaUpdate builder.
func (fsuo *FollowSchemaUpdateOne) Where(ps ...predicate.FollowSchema) *FollowSchemaUpdateOne {
	fsuo.mutation.Where(ps...)
	return fsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fsuo *FollowSchemaUpdateOne) Select(field string, fields ...string) *FollowSchemaUpdateOne {
	fsuo.fields = append([]string{field}, fields...)
	return fsuo
}

// Save executes the query and returns the updated FollowSchema entity.
func (fsuo *FollowSchemaUpdateOne) Save(ctx context.Context) (*FollowSchema, error) {
	return withHooks(ctx, fsuo.sqlSave, fsuo.mutation, fsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fsuo *FollowSchemaUpdateOne) SaveX(ctx context.Context) *FollowSchema {
	node, err := fsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fsuo *FollowSchemaUpdateOne) Exec(ctx context.Context) error {
	_, err := fsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsuo *FollowSchemaUpdateOne) ExecX(ctx context.Context) {
	if err := fsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fsuo *FollowSchemaUpdateOne) sqlSave(ctx context.Context) (_node *FollowSchema, err error) {
	_spec := sqlgraph.NewUpdateSpec(followschema.Table, followschema.Columns, sqlgraph.NewFieldSpec(followschema.FieldID, field.TypeInt))
	id, ok := fsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FollowSchema.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, followschema.FieldID)
		for _, f := range fields {
			if !followschema.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != followschema.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &FollowSchema{config: fsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{followschema.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fsuo.mutation.done = true
	return _node, nil
}
