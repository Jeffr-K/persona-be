// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"persona/libs/database/ent/photoschema"
	"persona/libs/database/ent/predicate"
	"persona/libs/database/ent/profileschema"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PhotoSchemaUpdate is the builder for updating PhotoSchema entities.
type PhotoSchemaUpdate struct {
	config
	hooks    []Hook
	mutation *PhotoSchemaMutation
}

// Where appends a list predicates to the PhotoSchemaUpdate builder.
func (psu *PhotoSchemaUpdate) Where(ps ...predicate.PhotoSchema) *PhotoSchemaUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetOwnerID sets the "owner" edge to the ProfileSchema entity by ID.
func (psu *PhotoSchemaUpdate) SetOwnerID(id int) *PhotoSchemaUpdate {
	psu.mutation.SetOwnerID(id)
	return psu
}

// SetOwner sets the "owner" edge to the ProfileSchema entity.
func (psu *PhotoSchemaUpdate) SetOwner(p *ProfileSchema) *PhotoSchemaUpdate {
	return psu.SetOwnerID(p.ID)
}

// Mutation returns the PhotoSchemaMutation object of the builder.
func (psu *PhotoSchemaUpdate) Mutation() *PhotoSchemaMutation {
	return psu.mutation
}

// ClearOwner clears the "owner" edge to the ProfileSchema entity.
func (psu *PhotoSchemaUpdate) ClearOwner() *PhotoSchemaUpdate {
	psu.mutation.ClearOwner()
	return psu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *PhotoSchemaUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, psu.sqlSave, psu.mutation, psu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psu *PhotoSchemaUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *PhotoSchemaUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *PhotoSchemaUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psu *PhotoSchemaUpdate) check() error {
	if _, ok := psu.mutation.OwnerID(); psu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PhotoSchema.owner"`)
	}
	return nil
}

func (psu *PhotoSchemaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := psu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(photoschema.Table, photoschema.Columns, sqlgraph.NewFieldSpec(photoschema.FieldID, field.TypeInt))
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if psu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   photoschema.OwnerTable,
			Columns: []string{photoschema.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profileschema.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   photoschema.OwnerTable,
			Columns: []string{photoschema.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profileschema.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{photoschema.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psu.mutation.done = true
	return n, nil
}

// PhotoSchemaUpdateOne is the builder for updating a single PhotoSchema entity.
type PhotoSchemaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PhotoSchemaMutation
}

// SetOwnerID sets the "owner" edge to the ProfileSchema entity by ID.
func (psuo *PhotoSchemaUpdateOne) SetOwnerID(id int) *PhotoSchemaUpdateOne {
	psuo.mutation.SetOwnerID(id)
	return psuo
}

// SetOwner sets the "owner" edge to the ProfileSchema entity.
func (psuo *PhotoSchemaUpdateOne) SetOwner(p *ProfileSchema) *PhotoSchemaUpdateOne {
	return psuo.SetOwnerID(p.ID)
}

// Mutation returns the PhotoSchemaMutation object of the builder.
func (psuo *PhotoSchemaUpdateOne) Mutation() *PhotoSchemaMutation {
	return psuo.mutation
}

// ClearOwner clears the "owner" edge to the ProfileSchema entity.
func (psuo *PhotoSchemaUpdateOne) ClearOwner() *PhotoSchemaUpdateOne {
	psuo.mutation.ClearOwner()
	return psuo
}

// Where appends a list predicates to the PhotoSchemaUpdate builder.
func (psuo *PhotoSchemaUpdateOne) Where(ps ...predicate.PhotoSchema) *PhotoSchemaUpdateOne {
	psuo.mutation.Where(ps...)
	return psuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *PhotoSchemaUpdateOne) Select(field string, fields ...string) *PhotoSchemaUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated PhotoSchema entity.
func (psuo *PhotoSchemaUpdateOne) Save(ctx context.Context) (*PhotoSchema, error) {
	return withHooks(ctx, psuo.sqlSave, psuo.mutation, psuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *PhotoSchemaUpdateOne) SaveX(ctx context.Context) *PhotoSchema {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *PhotoSchemaUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *PhotoSchemaUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psuo *PhotoSchemaUpdateOne) check() error {
	if _, ok := psuo.mutation.OwnerID(); psuo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PhotoSchema.owner"`)
	}
	return nil
}

func (psuo *PhotoSchemaUpdateOne) sqlSave(ctx context.Context) (_node *PhotoSchema, err error) {
	if err := psuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(photoschema.Table, photoschema.Columns, sqlgraph.NewFieldSpec(photoschema.FieldID, field.TypeInt))
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PhotoSchema.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, photoschema.FieldID)
		for _, f := range fields {
			if !photoschema.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != photoschema.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if psuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   photoschema.OwnerTable,
			Columns: []string{photoschema.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profileschema.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   photoschema.OwnerTable,
			Columns: []string{photoschema.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profileschema.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PhotoSchema{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{photoschema.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psuo.mutation.done = true
	return _node, nil
}
