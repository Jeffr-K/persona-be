// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"persona/libs/database/ent/personalizationschema"
	"persona/libs/database/ent/userschema"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PersonalizationSchema is the model entity for the PersonalizationSchema schema.
type PersonalizationSchema struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PersonalizationSchemaQuery when eager-loading is set.
	Edges                       PersonalizationSchemaEdges `json:"edges"`
	user_schema_personalization *int
	selectValues                sql.SelectValues
}

// PersonalizationSchemaEdges holds the relations/edges for other nodes in the graph.
type PersonalizationSchemaEdges struct {
	// User holds the value of the user edge.
	User *UserSchema `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PersonalizationSchemaEdges) UserOrErr() (*UserSchema, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: userschema.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PersonalizationSchema) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case personalizationschema.FieldID:
			values[i] = new(sql.NullInt64)
		case personalizationschema.ForeignKeys[0]: // user_schema_personalization
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PersonalizationSchema fields.
func (ps *PersonalizationSchema) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case personalizationschema.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ps.ID = int(value.Int64)
		case personalizationschema.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_schema_personalization", value)
			} else if value.Valid {
				ps.user_schema_personalization = new(int)
				*ps.user_schema_personalization = int(value.Int64)
			}
		default:
			ps.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PersonalizationSchema.
// This includes values selected through modifiers, order, etc.
func (ps *PersonalizationSchema) Value(name string) (ent.Value, error) {
	return ps.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the PersonalizationSchema entity.
func (ps *PersonalizationSchema) QueryUser() *UserSchemaQuery {
	return NewPersonalizationSchemaClient(ps.config).QueryUser(ps)
}

// Update returns a builder for updating this PersonalizationSchema.
// Note that you need to call PersonalizationSchema.Unwrap() before calling this method if this PersonalizationSchema
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *PersonalizationSchema) Update() *PersonalizationSchemaUpdateOne {
	return NewPersonalizationSchemaClient(ps.config).UpdateOne(ps)
}

// Unwrap unwraps the PersonalizationSchema entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *PersonalizationSchema) Unwrap() *PersonalizationSchema {
	_tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: PersonalizationSchema is not a transactional entity")
	}
	ps.config.driver = _tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *PersonalizationSchema) String() string {
	var builder strings.Builder
	builder.WriteString("PersonalizationSchema(")
	builder.WriteString(fmt.Sprintf("id=%v", ps.ID))
	builder.WriteByte(')')
	return builder.String()
}

// PersonalizationSchemas is a parsable slice of PersonalizationSchema.
type PersonalizationSchemas []*PersonalizationSchema
