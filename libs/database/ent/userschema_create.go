// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"persona/libs/database/ent/followschema"
	"persona/libs/database/ent/namecardschema"
	"persona/libs/database/ent/personalizationschema"
	"persona/libs/database/ent/profileschema"
	"persona/libs/database/ent/referrerschema"
	"persona/libs/database/ent/roleschema"
	"persona/libs/database/ent/userschema"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserSchemaCreate is the builder for creating a UserSchema entity.
type UserSchemaCreate struct {
	config
	mutation *UserSchemaMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (usc *UserSchemaCreate) SetUUID(u uuid.UUID) *UserSchemaCreate {
	usc.mutation.SetUUID(u)
	return usc
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (usc *UserSchemaCreate) SetNillableUUID(u *uuid.UUID) *UserSchemaCreate {
	if u != nil {
		usc.SetUUID(*u)
	}
	return usc
}

// SetUsername sets the "username" field.
func (usc *UserSchemaCreate) SetUsername(s string) *UserSchemaCreate {
	usc.mutation.SetUsername(s)
	return usc
}

// SetPassword sets the "password" field.
func (usc *UserSchemaCreate) SetPassword(s string) *UserSchemaCreate {
	usc.mutation.SetPassword(s)
	return usc
}

// SetEmail sets the "email" field.
func (usc *UserSchemaCreate) SetEmail(s string) *UserSchemaCreate {
	usc.mutation.SetEmail(s)
	return usc
}

// SetCreatedAt sets the "createdAt" field.
func (usc *UserSchemaCreate) SetCreatedAt(t time.Time) *UserSchemaCreate {
	usc.mutation.SetCreatedAt(t)
	return usc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (usc *UserSchemaCreate) SetNillableCreatedAt(t *time.Time) *UserSchemaCreate {
	if t != nil {
		usc.SetCreatedAt(*t)
	}
	return usc
}

// SetUpdatedAt sets the "updatedAt" field.
func (usc *UserSchemaCreate) SetUpdatedAt(t time.Time) *UserSchemaCreate {
	usc.mutation.SetUpdatedAt(t)
	return usc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (usc *UserSchemaCreate) SetNillableUpdatedAt(t *time.Time) *UserSchemaCreate {
	if t != nil {
		usc.SetUpdatedAt(*t)
	}
	return usc
}

// AddRoleIDs adds the "roles" edge to the RoleSchema entity by IDs.
func (usc *UserSchemaCreate) AddRoleIDs(ids ...int) *UserSchemaCreate {
	usc.mutation.AddRoleIDs(ids...)
	return usc
}

// AddRoles adds the "roles" edges to the RoleSchema entity.
func (usc *UserSchemaCreate) AddRoles(r ...*RoleSchema) *UserSchemaCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return usc.AddRoleIDs(ids...)
}

// SetProfileID sets the "profile" edge to the ProfileSchema entity by ID.
func (usc *UserSchemaCreate) SetProfileID(id int) *UserSchemaCreate {
	usc.mutation.SetProfileID(id)
	return usc
}

// SetNillableProfileID sets the "profile" edge to the ProfileSchema entity by ID if the given value is not nil.
func (usc *UserSchemaCreate) SetNillableProfileID(id *int) *UserSchemaCreate {
	if id != nil {
		usc = usc.SetProfileID(*id)
	}
	return usc
}

// SetProfile sets the "profile" edge to the ProfileSchema entity.
func (usc *UserSchemaCreate) SetProfile(p *ProfileSchema) *UserSchemaCreate {
	return usc.SetProfileID(p.ID)
}

// SetFollowID sets the "follow" edge to the FollowSchema entity by ID.
func (usc *UserSchemaCreate) SetFollowID(id int) *UserSchemaCreate {
	usc.mutation.SetFollowID(id)
	return usc
}

// SetNillableFollowID sets the "follow" edge to the FollowSchema entity by ID if the given value is not nil.
func (usc *UserSchemaCreate) SetNillableFollowID(id *int) *UserSchemaCreate {
	if id != nil {
		usc = usc.SetFollowID(*id)
	}
	return usc
}

// SetFollow sets the "follow" edge to the FollowSchema entity.
func (usc *UserSchemaCreate) SetFollow(f *FollowSchema) *UserSchemaCreate {
	return usc.SetFollowID(f.ID)
}

// SetReferrerID sets the "referrer" edge to the ReferrerSchema entity by ID.
func (usc *UserSchemaCreate) SetReferrerID(id int) *UserSchemaCreate {
	usc.mutation.SetReferrerID(id)
	return usc
}

// SetNillableReferrerID sets the "referrer" edge to the ReferrerSchema entity by ID if the given value is not nil.
func (usc *UserSchemaCreate) SetNillableReferrerID(id *int) *UserSchemaCreate {
	if id != nil {
		usc = usc.SetReferrerID(*id)
	}
	return usc
}

// SetReferrer sets the "referrer" edge to the ReferrerSchema entity.
func (usc *UserSchemaCreate) SetReferrer(r *ReferrerSchema) *UserSchemaCreate {
	return usc.SetReferrerID(r.ID)
}

// SetPersonalizationID sets the "personalization" edge to the PersonalizationSchema entity by ID.
func (usc *UserSchemaCreate) SetPersonalizationID(id int) *UserSchemaCreate {
	usc.mutation.SetPersonalizationID(id)
	return usc
}

// SetNillablePersonalizationID sets the "personalization" edge to the PersonalizationSchema entity by ID if the given value is not nil.
func (usc *UserSchemaCreate) SetNillablePersonalizationID(id *int) *UserSchemaCreate {
	if id != nil {
		usc = usc.SetPersonalizationID(*id)
	}
	return usc
}

// SetPersonalization sets the "personalization" edge to the PersonalizationSchema entity.
func (usc *UserSchemaCreate) SetPersonalization(p *PersonalizationSchema) *UserSchemaCreate {
	return usc.SetPersonalizationID(p.ID)
}

// SetNamecardID sets the "namecard" edge to the NamecardSchema entity by ID.
func (usc *UserSchemaCreate) SetNamecardID(id int) *UserSchemaCreate {
	usc.mutation.SetNamecardID(id)
	return usc
}

// SetNillableNamecardID sets the "namecard" edge to the NamecardSchema entity by ID if the given value is not nil.
func (usc *UserSchemaCreate) SetNillableNamecardID(id *int) *UserSchemaCreate {
	if id != nil {
		usc = usc.SetNamecardID(*id)
	}
	return usc
}

// SetNamecard sets the "namecard" edge to the NamecardSchema entity.
func (usc *UserSchemaCreate) SetNamecard(n *NamecardSchema) *UserSchemaCreate {
	return usc.SetNamecardID(n.ID)
}

// Mutation returns the UserSchemaMutation object of the builder.
func (usc *UserSchemaCreate) Mutation() *UserSchemaMutation {
	return usc.mutation
}

// Save creates the UserSchema in the database.
func (usc *UserSchemaCreate) Save(ctx context.Context) (*UserSchema, error) {
	usc.defaults()
	return withHooks(ctx, usc.sqlSave, usc.mutation, usc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (usc *UserSchemaCreate) SaveX(ctx context.Context) *UserSchema {
	v, err := usc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (usc *UserSchemaCreate) Exec(ctx context.Context) error {
	_, err := usc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usc *UserSchemaCreate) ExecX(ctx context.Context) {
	if err := usc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usc *UserSchemaCreate) defaults() {
	if _, ok := usc.mutation.UUID(); !ok {
		v := userschema.DefaultUUID()
		usc.mutation.SetUUID(v)
	}
	if _, ok := usc.mutation.CreatedAt(); !ok {
		v := userschema.DefaultCreatedAt()
		usc.mutation.SetCreatedAt(v)
	}
	if _, ok := usc.mutation.UpdatedAt(); !ok {
		v := userschema.DefaultUpdatedAt()
		usc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usc *UserSchemaCreate) check() error {
	if _, ok := usc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "UserSchema.uuid"`)}
	}
	if _, ok := usc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "UserSchema.username"`)}
	}
	if _, ok := usc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "UserSchema.password"`)}
	}
	if _, ok := usc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "UserSchema.email"`)}
	}
	if _, ok := usc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "UserSchema.createdAt"`)}
	}
	if _, ok := usc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "UserSchema.updatedAt"`)}
	}
	return nil
}

func (usc *UserSchemaCreate) sqlSave(ctx context.Context) (*UserSchema, error) {
	if err := usc.check(); err != nil {
		return nil, err
	}
	_node, _spec := usc.createSpec()
	if err := sqlgraph.CreateNode(ctx, usc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	usc.mutation.id = &_node.ID
	usc.mutation.done = true
	return _node, nil
}

func (usc *UserSchemaCreate) createSpec() (*UserSchema, *sqlgraph.CreateSpec) {
	var (
		_node = &UserSchema{config: usc.config}
		_spec = sqlgraph.NewCreateSpec(userschema.Table, sqlgraph.NewFieldSpec(userschema.FieldID, field.TypeInt))
	)
	if value, ok := usc.mutation.UUID(); ok {
		_spec.SetField(userschema.FieldUUID, field.TypeUUID, value)
		_node.UUID = value
	}
	if value, ok := usc.mutation.Username(); ok {
		_spec.SetField(userschema.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := usc.mutation.Password(); ok {
		_spec.SetField(userschema.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := usc.mutation.Email(); ok {
		_spec.SetField(userschema.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := usc.mutation.CreatedAt(); ok {
		_spec.SetField(userschema.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := usc.mutation.UpdatedAt(); ok {
		_spec.SetField(userschema.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := usc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userschema.RolesTable,
			Columns: []string{userschema.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roleschema.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := usc.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   userschema.ProfileTable,
			Columns: []string{userschema.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profileschema.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := usc.mutation.FollowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userschema.FollowTable,
			Columns: []string{userschema.FollowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(followschema.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_schema_follow = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := usc.mutation.ReferrerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   userschema.ReferrerTable,
			Columns: []string{userschema.ReferrerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(referrerschema.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := usc.mutation.PersonalizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   userschema.PersonalizationTable,
			Columns: []string{userschema.PersonalizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalizationschema.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := usc.mutation.NamecardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   userschema.NamecardTable,
			Columns: []string{userschema.NamecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namecardschema.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserSchemaCreateBulk is the builder for creating many UserSchema entities in bulk.
type UserSchemaCreateBulk struct {
	config
	builders []*UserSchemaCreate
}

// Save creates the UserSchema entities in the database.
func (uscb *UserSchemaCreateBulk) Save(ctx context.Context) ([]*UserSchema, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uscb.builders))
	nodes := make([]*UserSchema, len(uscb.builders))
	mutators := make([]Mutator, len(uscb.builders))
	for i := range uscb.builders {
		func(i int, root context.Context) {
			builder := uscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserSchemaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uscb *UserSchemaCreateBulk) SaveX(ctx context.Context) []*UserSchema {
	v, err := uscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uscb *UserSchemaCreateBulk) Exec(ctx context.Context) error {
	_, err := uscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uscb *UserSchemaCreateBulk) ExecX(ctx context.Context) {
	if err := uscb.Exec(ctx); err != nil {
		panic(err)
	}
}
