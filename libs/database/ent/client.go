// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"persona/libs/database/ent/migrate"

	"persona/libs/database/ent/applicationschema"
	"persona/libs/database/ent/assignmentschema"
	"persona/libs/database/ent/badgeschema"
	"persona/libs/database/ent/bookmarkschema"
	"persona/libs/database/ent/commentschema"
	"persona/libs/database/ent/companyschema"
	"persona/libs/database/ent/coverletterschema"
	"persona/libs/database/ent/experienceschema"
	"persona/libs/database/ent/followschema"
	"persona/libs/database/ent/imageschema"
	"persona/libs/database/ent/jobschema"
	"persona/libs/database/ent/leetcodeschema"
	"persona/libs/database/ent/likeschema"
	"persona/libs/database/ent/locationschema"
	"persona/libs/database/ent/logoschema"
	"persona/libs/database/ent/namecardschema"
	"persona/libs/database/ent/notificationschema"
	"persona/libs/database/ent/paymentschema"
	"persona/libs/database/ent/personalizationschema"
	"persona/libs/database/ent/phoneschema"
	"persona/libs/database/ent/photoschema"
	"persona/libs/database/ent/poolschema"
	"persona/libs/database/ent/portfolioschema"
	"persona/libs/database/ent/positionschema"
	"persona/libs/database/ent/profileschema"
	"persona/libs/database/ent/referrerschema"
	"persona/libs/database/ent/resumeschema"
	"persona/libs/database/ent/roleschema"
	"persona/libs/database/ent/skillschema"
	"persona/libs/database/ent/subscribeschema"
	"persona/libs/database/ent/threadschema"
	"persona/libs/database/ent/userschema"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ApplicationSchema is the client for interacting with the ApplicationSchema builders.
	ApplicationSchema *ApplicationSchemaClient
	// AssignmentSchema is the client for interacting with the AssignmentSchema builders.
	AssignmentSchema *AssignmentSchemaClient
	// BadgeSchema is the client for interacting with the BadgeSchema builders.
	BadgeSchema *BadgeSchemaClient
	// BookmarkSchema is the client for interacting with the BookmarkSchema builders.
	BookmarkSchema *BookmarkSchemaClient
	// CommentSchema is the client for interacting with the CommentSchema builders.
	CommentSchema *CommentSchemaClient
	// CompanySchema is the client for interacting with the CompanySchema builders.
	CompanySchema *CompanySchemaClient
	// CoverLetterSchema is the client for interacting with the CoverLetterSchema builders.
	CoverLetterSchema *CoverLetterSchemaClient
	// ExperienceSchema is the client for interacting with the ExperienceSchema builders.
	ExperienceSchema *ExperienceSchemaClient
	// FollowSchema is the client for interacting with the FollowSchema builders.
	FollowSchema *FollowSchemaClient
	// ImageSchema is the client for interacting with the ImageSchema builders.
	ImageSchema *ImageSchemaClient
	// JobSchema is the client for interacting with the JobSchema builders.
	JobSchema *JobSchemaClient
	// LeetcodeSchema is the client for interacting with the LeetcodeSchema builders.
	LeetcodeSchema *LeetcodeSchemaClient
	// LikeSchema is the client for interacting with the LikeSchema builders.
	LikeSchema *LikeSchemaClient
	// LocationSchema is the client for interacting with the LocationSchema builders.
	LocationSchema *LocationSchemaClient
	// LogoSchema is the client for interacting with the LogoSchema builders.
	LogoSchema *LogoSchemaClient
	// NamecardSchema is the client for interacting with the NamecardSchema builders.
	NamecardSchema *NamecardSchemaClient
	// NotificationSchema is the client for interacting with the NotificationSchema builders.
	NotificationSchema *NotificationSchemaClient
	// PaymentSchema is the client for interacting with the PaymentSchema builders.
	PaymentSchema *PaymentSchemaClient
	// PersonalizationSchema is the client for interacting with the PersonalizationSchema builders.
	PersonalizationSchema *PersonalizationSchemaClient
	// PhoneSchema is the client for interacting with the PhoneSchema builders.
	PhoneSchema *PhoneSchemaClient
	// PhotoSchema is the client for interacting with the PhotoSchema builders.
	PhotoSchema *PhotoSchemaClient
	// PoolSchema is the client for interacting with the PoolSchema builders.
	PoolSchema *PoolSchemaClient
	// PortfolioSchema is the client for interacting with the PortfolioSchema builders.
	PortfolioSchema *PortfolioSchemaClient
	// PositionSchema is the client for interacting with the PositionSchema builders.
	PositionSchema *PositionSchemaClient
	// ProfileSchema is the client for interacting with the ProfileSchema builders.
	ProfileSchema *ProfileSchemaClient
	// ReferrerSchema is the client for interacting with the ReferrerSchema builders.
	ReferrerSchema *ReferrerSchemaClient
	// ResumeSchema is the client for interacting with the ResumeSchema builders.
	ResumeSchema *ResumeSchemaClient
	// RoleSchema is the client for interacting with the RoleSchema builders.
	RoleSchema *RoleSchemaClient
	// SkillSchema is the client for interacting with the SkillSchema builders.
	SkillSchema *SkillSchemaClient
	// SubscribeSchema is the client for interacting with the SubscribeSchema builders.
	SubscribeSchema *SubscribeSchemaClient
	// ThreadSchema is the client for interacting with the ThreadSchema builders.
	ThreadSchema *ThreadSchemaClient
	// UserSchema is the client for interacting with the UserSchema builders.
	UserSchema *UserSchemaClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ApplicationSchema = NewApplicationSchemaClient(c.config)
	c.AssignmentSchema = NewAssignmentSchemaClient(c.config)
	c.BadgeSchema = NewBadgeSchemaClient(c.config)
	c.BookmarkSchema = NewBookmarkSchemaClient(c.config)
	c.CommentSchema = NewCommentSchemaClient(c.config)
	c.CompanySchema = NewCompanySchemaClient(c.config)
	c.CoverLetterSchema = NewCoverLetterSchemaClient(c.config)
	c.ExperienceSchema = NewExperienceSchemaClient(c.config)
	c.FollowSchema = NewFollowSchemaClient(c.config)
	c.ImageSchema = NewImageSchemaClient(c.config)
	c.JobSchema = NewJobSchemaClient(c.config)
	c.LeetcodeSchema = NewLeetcodeSchemaClient(c.config)
	c.LikeSchema = NewLikeSchemaClient(c.config)
	c.LocationSchema = NewLocationSchemaClient(c.config)
	c.LogoSchema = NewLogoSchemaClient(c.config)
	c.NamecardSchema = NewNamecardSchemaClient(c.config)
	c.NotificationSchema = NewNotificationSchemaClient(c.config)
	c.PaymentSchema = NewPaymentSchemaClient(c.config)
	c.PersonalizationSchema = NewPersonalizationSchemaClient(c.config)
	c.PhoneSchema = NewPhoneSchemaClient(c.config)
	c.PhotoSchema = NewPhotoSchemaClient(c.config)
	c.PoolSchema = NewPoolSchemaClient(c.config)
	c.PortfolioSchema = NewPortfolioSchemaClient(c.config)
	c.PositionSchema = NewPositionSchemaClient(c.config)
	c.ProfileSchema = NewProfileSchemaClient(c.config)
	c.ReferrerSchema = NewReferrerSchemaClient(c.config)
	c.ResumeSchema = NewResumeSchemaClient(c.config)
	c.RoleSchema = NewRoleSchemaClient(c.config)
	c.SkillSchema = NewSkillSchemaClient(c.config)
	c.SubscribeSchema = NewSubscribeSchemaClient(c.config)
	c.ThreadSchema = NewThreadSchemaClient(c.config)
	c.UserSchema = NewUserSchemaClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		ApplicationSchema:     NewApplicationSchemaClient(cfg),
		AssignmentSchema:      NewAssignmentSchemaClient(cfg),
		BadgeSchema:           NewBadgeSchemaClient(cfg),
		BookmarkSchema:        NewBookmarkSchemaClient(cfg),
		CommentSchema:         NewCommentSchemaClient(cfg),
		CompanySchema:         NewCompanySchemaClient(cfg),
		CoverLetterSchema:     NewCoverLetterSchemaClient(cfg),
		ExperienceSchema:      NewExperienceSchemaClient(cfg),
		FollowSchema:          NewFollowSchemaClient(cfg),
		ImageSchema:           NewImageSchemaClient(cfg),
		JobSchema:             NewJobSchemaClient(cfg),
		LeetcodeSchema:        NewLeetcodeSchemaClient(cfg),
		LikeSchema:            NewLikeSchemaClient(cfg),
		LocationSchema:        NewLocationSchemaClient(cfg),
		LogoSchema:            NewLogoSchemaClient(cfg),
		NamecardSchema:        NewNamecardSchemaClient(cfg),
		NotificationSchema:    NewNotificationSchemaClient(cfg),
		PaymentSchema:         NewPaymentSchemaClient(cfg),
		PersonalizationSchema: NewPersonalizationSchemaClient(cfg),
		PhoneSchema:           NewPhoneSchemaClient(cfg),
		PhotoSchema:           NewPhotoSchemaClient(cfg),
		PoolSchema:            NewPoolSchemaClient(cfg),
		PortfolioSchema:       NewPortfolioSchemaClient(cfg),
		PositionSchema:        NewPositionSchemaClient(cfg),
		ProfileSchema:         NewProfileSchemaClient(cfg),
		ReferrerSchema:        NewReferrerSchemaClient(cfg),
		ResumeSchema:          NewResumeSchemaClient(cfg),
		RoleSchema:            NewRoleSchemaClient(cfg),
		SkillSchema:           NewSkillSchemaClient(cfg),
		SubscribeSchema:       NewSubscribeSchemaClient(cfg),
		ThreadSchema:          NewThreadSchemaClient(cfg),
		UserSchema:            NewUserSchemaClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		ApplicationSchema:     NewApplicationSchemaClient(cfg),
		AssignmentSchema:      NewAssignmentSchemaClient(cfg),
		BadgeSchema:           NewBadgeSchemaClient(cfg),
		BookmarkSchema:        NewBookmarkSchemaClient(cfg),
		CommentSchema:         NewCommentSchemaClient(cfg),
		CompanySchema:         NewCompanySchemaClient(cfg),
		CoverLetterSchema:     NewCoverLetterSchemaClient(cfg),
		ExperienceSchema:      NewExperienceSchemaClient(cfg),
		FollowSchema:          NewFollowSchemaClient(cfg),
		ImageSchema:           NewImageSchemaClient(cfg),
		JobSchema:             NewJobSchemaClient(cfg),
		LeetcodeSchema:        NewLeetcodeSchemaClient(cfg),
		LikeSchema:            NewLikeSchemaClient(cfg),
		LocationSchema:        NewLocationSchemaClient(cfg),
		LogoSchema:            NewLogoSchemaClient(cfg),
		NamecardSchema:        NewNamecardSchemaClient(cfg),
		NotificationSchema:    NewNotificationSchemaClient(cfg),
		PaymentSchema:         NewPaymentSchemaClient(cfg),
		PersonalizationSchema: NewPersonalizationSchemaClient(cfg),
		PhoneSchema:           NewPhoneSchemaClient(cfg),
		PhotoSchema:           NewPhotoSchemaClient(cfg),
		PoolSchema:            NewPoolSchemaClient(cfg),
		PortfolioSchema:       NewPortfolioSchemaClient(cfg),
		PositionSchema:        NewPositionSchemaClient(cfg),
		ProfileSchema:         NewProfileSchemaClient(cfg),
		ReferrerSchema:        NewReferrerSchemaClient(cfg),
		ResumeSchema:          NewResumeSchemaClient(cfg),
		RoleSchema:            NewRoleSchemaClient(cfg),
		SkillSchema:           NewSkillSchemaClient(cfg),
		SubscribeSchema:       NewSubscribeSchemaClient(cfg),
		ThreadSchema:          NewThreadSchemaClient(cfg),
		UserSchema:            NewUserSchemaClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ApplicationSchema.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.ApplicationSchema, c.AssignmentSchema, c.BadgeSchema, c.BookmarkSchema,
		c.CommentSchema, c.CompanySchema, c.CoverLetterSchema, c.ExperienceSchema,
		c.FollowSchema, c.ImageSchema, c.JobSchema, c.LeetcodeSchema, c.LikeSchema,
		c.LocationSchema, c.LogoSchema, c.NamecardSchema, c.NotificationSchema,
		c.PaymentSchema, c.PersonalizationSchema, c.PhoneSchema, c.PhotoSchema,
		c.PoolSchema, c.PortfolioSchema, c.PositionSchema, c.ProfileSchema,
		c.ReferrerSchema, c.ResumeSchema, c.RoleSchema, c.SkillSchema,
		c.SubscribeSchema, c.ThreadSchema, c.UserSchema,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.ApplicationSchema, c.AssignmentSchema, c.BadgeSchema, c.BookmarkSchema,
		c.CommentSchema, c.CompanySchema, c.CoverLetterSchema, c.ExperienceSchema,
		c.FollowSchema, c.ImageSchema, c.JobSchema, c.LeetcodeSchema, c.LikeSchema,
		c.LocationSchema, c.LogoSchema, c.NamecardSchema, c.NotificationSchema,
		c.PaymentSchema, c.PersonalizationSchema, c.PhoneSchema, c.PhotoSchema,
		c.PoolSchema, c.PortfolioSchema, c.PositionSchema, c.ProfileSchema,
		c.ReferrerSchema, c.ResumeSchema, c.RoleSchema, c.SkillSchema,
		c.SubscribeSchema, c.ThreadSchema, c.UserSchema,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ApplicationSchemaMutation:
		return c.ApplicationSchema.mutate(ctx, m)
	case *AssignmentSchemaMutation:
		return c.AssignmentSchema.mutate(ctx, m)
	case *BadgeSchemaMutation:
		return c.BadgeSchema.mutate(ctx, m)
	case *BookmarkSchemaMutation:
		return c.BookmarkSchema.mutate(ctx, m)
	case *CommentSchemaMutation:
		return c.CommentSchema.mutate(ctx, m)
	case *CompanySchemaMutation:
		return c.CompanySchema.mutate(ctx, m)
	case *CoverLetterSchemaMutation:
		return c.CoverLetterSchema.mutate(ctx, m)
	case *ExperienceSchemaMutation:
		return c.ExperienceSchema.mutate(ctx, m)
	case *FollowSchemaMutation:
		return c.FollowSchema.mutate(ctx, m)
	case *ImageSchemaMutation:
		return c.ImageSchema.mutate(ctx, m)
	case *JobSchemaMutation:
		return c.JobSchema.mutate(ctx, m)
	case *LeetcodeSchemaMutation:
		return c.LeetcodeSchema.mutate(ctx, m)
	case *LikeSchemaMutation:
		return c.LikeSchema.mutate(ctx, m)
	case *LocationSchemaMutation:
		return c.LocationSchema.mutate(ctx, m)
	case *LogoSchemaMutation:
		return c.LogoSchema.mutate(ctx, m)
	case *NamecardSchemaMutation:
		return c.NamecardSchema.mutate(ctx, m)
	case *NotificationSchemaMutation:
		return c.NotificationSchema.mutate(ctx, m)
	case *PaymentSchemaMutation:
		return c.PaymentSchema.mutate(ctx, m)
	case *PersonalizationSchemaMutation:
		return c.PersonalizationSchema.mutate(ctx, m)
	case *PhoneSchemaMutation:
		return c.PhoneSchema.mutate(ctx, m)
	case *PhotoSchemaMutation:
		return c.PhotoSchema.mutate(ctx, m)
	case *PoolSchemaMutation:
		return c.PoolSchema.mutate(ctx, m)
	case *PortfolioSchemaMutation:
		return c.PortfolioSchema.mutate(ctx, m)
	case *PositionSchemaMutation:
		return c.PositionSchema.mutate(ctx, m)
	case *ProfileSchemaMutation:
		return c.ProfileSchema.mutate(ctx, m)
	case *ReferrerSchemaMutation:
		return c.ReferrerSchema.mutate(ctx, m)
	case *ResumeSchemaMutation:
		return c.ResumeSchema.mutate(ctx, m)
	case *RoleSchemaMutation:
		return c.RoleSchema.mutate(ctx, m)
	case *SkillSchemaMutation:
		return c.SkillSchema.mutate(ctx, m)
	case *SubscribeSchemaMutation:
		return c.SubscribeSchema.mutate(ctx, m)
	case *ThreadSchemaMutation:
		return c.ThreadSchema.mutate(ctx, m)
	case *UserSchemaMutation:
		return c.UserSchema.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ApplicationSchemaClient is a client for the ApplicationSchema schema.
type ApplicationSchemaClient struct {
	config
}

// NewApplicationSchemaClient returns a client for the ApplicationSchema from the given config.
func NewApplicationSchemaClient(c config) *ApplicationSchemaClient {
	return &ApplicationSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `applicationschema.Hooks(f(g(h())))`.
func (c *ApplicationSchemaClient) Use(hooks ...Hook) {
	c.hooks.ApplicationSchema = append(c.hooks.ApplicationSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `applicationschema.Intercept(f(g(h())))`.
func (c *ApplicationSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.ApplicationSchema = append(c.inters.ApplicationSchema, interceptors...)
}

// Create returns a builder for creating a ApplicationSchema entity.
func (c *ApplicationSchemaClient) Create() *ApplicationSchemaCreate {
	mutation := newApplicationSchemaMutation(c.config, OpCreate)
	return &ApplicationSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ApplicationSchema entities.
func (c *ApplicationSchemaClient) CreateBulk(builders ...*ApplicationSchemaCreate) *ApplicationSchemaCreateBulk {
	return &ApplicationSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ApplicationSchema.
func (c *ApplicationSchemaClient) Update() *ApplicationSchemaUpdate {
	mutation := newApplicationSchemaMutation(c.config, OpUpdate)
	return &ApplicationSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApplicationSchemaClient) UpdateOne(as *ApplicationSchema) *ApplicationSchemaUpdateOne {
	mutation := newApplicationSchemaMutation(c.config, OpUpdateOne, withApplicationSchema(as))
	return &ApplicationSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApplicationSchemaClient) UpdateOneID(id int) *ApplicationSchemaUpdateOne {
	mutation := newApplicationSchemaMutation(c.config, OpUpdateOne, withApplicationSchemaID(id))
	return &ApplicationSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ApplicationSchema.
func (c *ApplicationSchemaClient) Delete() *ApplicationSchemaDelete {
	mutation := newApplicationSchemaMutation(c.config, OpDelete)
	return &ApplicationSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApplicationSchemaClient) DeleteOne(as *ApplicationSchema) *ApplicationSchemaDeleteOne {
	return c.DeleteOneID(as.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApplicationSchemaClient) DeleteOneID(id int) *ApplicationSchemaDeleteOne {
	builder := c.Delete().Where(applicationschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApplicationSchemaDeleteOne{builder}
}

// Query returns a query builder for ApplicationSchema.
func (c *ApplicationSchemaClient) Query() *ApplicationSchemaQuery {
	return &ApplicationSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApplicationSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a ApplicationSchema entity by its id.
func (c *ApplicationSchemaClient) Get(ctx context.Context, id int) (*ApplicationSchema, error) {
	return c.Query().Where(applicationschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApplicationSchemaClient) GetX(ctx context.Context, id int) *ApplicationSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ApplicationSchemaClient) Hooks() []Hook {
	return c.hooks.ApplicationSchema
}

// Interceptors returns the client interceptors.
func (c *ApplicationSchemaClient) Interceptors() []Interceptor {
	return c.inters.ApplicationSchema
}

func (c *ApplicationSchemaClient) mutate(ctx context.Context, m *ApplicationSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApplicationSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApplicationSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApplicationSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApplicationSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ApplicationSchema mutation op: %q", m.Op())
	}
}

// AssignmentSchemaClient is a client for the AssignmentSchema schema.
type AssignmentSchemaClient struct {
	config
}

// NewAssignmentSchemaClient returns a client for the AssignmentSchema from the given config.
func NewAssignmentSchemaClient(c config) *AssignmentSchemaClient {
	return &AssignmentSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `assignmentschema.Hooks(f(g(h())))`.
func (c *AssignmentSchemaClient) Use(hooks ...Hook) {
	c.hooks.AssignmentSchema = append(c.hooks.AssignmentSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `assignmentschema.Intercept(f(g(h())))`.
func (c *AssignmentSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.AssignmentSchema = append(c.inters.AssignmentSchema, interceptors...)
}

// Create returns a builder for creating a AssignmentSchema entity.
func (c *AssignmentSchemaClient) Create() *AssignmentSchemaCreate {
	mutation := newAssignmentSchemaMutation(c.config, OpCreate)
	return &AssignmentSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AssignmentSchema entities.
func (c *AssignmentSchemaClient) CreateBulk(builders ...*AssignmentSchemaCreate) *AssignmentSchemaCreateBulk {
	return &AssignmentSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AssignmentSchema.
func (c *AssignmentSchemaClient) Update() *AssignmentSchemaUpdate {
	mutation := newAssignmentSchemaMutation(c.config, OpUpdate)
	return &AssignmentSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AssignmentSchemaClient) UpdateOne(as *AssignmentSchema) *AssignmentSchemaUpdateOne {
	mutation := newAssignmentSchemaMutation(c.config, OpUpdateOne, withAssignmentSchema(as))
	return &AssignmentSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AssignmentSchemaClient) UpdateOneID(id int) *AssignmentSchemaUpdateOne {
	mutation := newAssignmentSchemaMutation(c.config, OpUpdateOne, withAssignmentSchemaID(id))
	return &AssignmentSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AssignmentSchema.
func (c *AssignmentSchemaClient) Delete() *AssignmentSchemaDelete {
	mutation := newAssignmentSchemaMutation(c.config, OpDelete)
	return &AssignmentSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AssignmentSchemaClient) DeleteOne(as *AssignmentSchema) *AssignmentSchemaDeleteOne {
	return c.DeleteOneID(as.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AssignmentSchemaClient) DeleteOneID(id int) *AssignmentSchemaDeleteOne {
	builder := c.Delete().Where(assignmentschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AssignmentSchemaDeleteOne{builder}
}

// Query returns a query builder for AssignmentSchema.
func (c *AssignmentSchemaClient) Query() *AssignmentSchemaQuery {
	return &AssignmentSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAssignmentSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a AssignmentSchema entity by its id.
func (c *AssignmentSchemaClient) Get(ctx context.Context, id int) (*AssignmentSchema, error) {
	return c.Query().Where(assignmentschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AssignmentSchemaClient) GetX(ctx context.Context, id int) *AssignmentSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AssignmentSchemaClient) Hooks() []Hook {
	return c.hooks.AssignmentSchema
}

// Interceptors returns the client interceptors.
func (c *AssignmentSchemaClient) Interceptors() []Interceptor {
	return c.inters.AssignmentSchema
}

func (c *AssignmentSchemaClient) mutate(ctx context.Context, m *AssignmentSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AssignmentSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AssignmentSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AssignmentSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AssignmentSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AssignmentSchema mutation op: %q", m.Op())
	}
}

// BadgeSchemaClient is a client for the BadgeSchema schema.
type BadgeSchemaClient struct {
	config
}

// NewBadgeSchemaClient returns a client for the BadgeSchema from the given config.
func NewBadgeSchemaClient(c config) *BadgeSchemaClient {
	return &BadgeSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `badgeschema.Hooks(f(g(h())))`.
func (c *BadgeSchemaClient) Use(hooks ...Hook) {
	c.hooks.BadgeSchema = append(c.hooks.BadgeSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `badgeschema.Intercept(f(g(h())))`.
func (c *BadgeSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.BadgeSchema = append(c.inters.BadgeSchema, interceptors...)
}

// Create returns a builder for creating a BadgeSchema entity.
func (c *BadgeSchemaClient) Create() *BadgeSchemaCreate {
	mutation := newBadgeSchemaMutation(c.config, OpCreate)
	return &BadgeSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BadgeSchema entities.
func (c *BadgeSchemaClient) CreateBulk(builders ...*BadgeSchemaCreate) *BadgeSchemaCreateBulk {
	return &BadgeSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BadgeSchema.
func (c *BadgeSchemaClient) Update() *BadgeSchemaUpdate {
	mutation := newBadgeSchemaMutation(c.config, OpUpdate)
	return &BadgeSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BadgeSchemaClient) UpdateOne(bs *BadgeSchema) *BadgeSchemaUpdateOne {
	mutation := newBadgeSchemaMutation(c.config, OpUpdateOne, withBadgeSchema(bs))
	return &BadgeSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BadgeSchemaClient) UpdateOneID(id int) *BadgeSchemaUpdateOne {
	mutation := newBadgeSchemaMutation(c.config, OpUpdateOne, withBadgeSchemaID(id))
	return &BadgeSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BadgeSchema.
func (c *BadgeSchemaClient) Delete() *BadgeSchemaDelete {
	mutation := newBadgeSchemaMutation(c.config, OpDelete)
	return &BadgeSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BadgeSchemaClient) DeleteOne(bs *BadgeSchema) *BadgeSchemaDeleteOne {
	return c.DeleteOneID(bs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BadgeSchemaClient) DeleteOneID(id int) *BadgeSchemaDeleteOne {
	builder := c.Delete().Where(badgeschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BadgeSchemaDeleteOne{builder}
}

// Query returns a query builder for BadgeSchema.
func (c *BadgeSchemaClient) Query() *BadgeSchemaQuery {
	return &BadgeSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBadgeSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a BadgeSchema entity by its id.
func (c *BadgeSchemaClient) Get(ctx context.Context, id int) (*BadgeSchema, error) {
	return c.Query().Where(badgeschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BadgeSchemaClient) GetX(ctx context.Context, id int) *BadgeSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BadgeSchemaClient) Hooks() []Hook {
	return c.hooks.BadgeSchema
}

// Interceptors returns the client interceptors.
func (c *BadgeSchemaClient) Interceptors() []Interceptor {
	return c.inters.BadgeSchema
}

func (c *BadgeSchemaClient) mutate(ctx context.Context, m *BadgeSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BadgeSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BadgeSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BadgeSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BadgeSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BadgeSchema mutation op: %q", m.Op())
	}
}

// BookmarkSchemaClient is a client for the BookmarkSchema schema.
type BookmarkSchemaClient struct {
	config
}

// NewBookmarkSchemaClient returns a client for the BookmarkSchema from the given config.
func NewBookmarkSchemaClient(c config) *BookmarkSchemaClient {
	return &BookmarkSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bookmarkschema.Hooks(f(g(h())))`.
func (c *BookmarkSchemaClient) Use(hooks ...Hook) {
	c.hooks.BookmarkSchema = append(c.hooks.BookmarkSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `bookmarkschema.Intercept(f(g(h())))`.
func (c *BookmarkSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.BookmarkSchema = append(c.inters.BookmarkSchema, interceptors...)
}

// Create returns a builder for creating a BookmarkSchema entity.
func (c *BookmarkSchemaClient) Create() *BookmarkSchemaCreate {
	mutation := newBookmarkSchemaMutation(c.config, OpCreate)
	return &BookmarkSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BookmarkSchema entities.
func (c *BookmarkSchemaClient) CreateBulk(builders ...*BookmarkSchemaCreate) *BookmarkSchemaCreateBulk {
	return &BookmarkSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BookmarkSchema.
func (c *BookmarkSchemaClient) Update() *BookmarkSchemaUpdate {
	mutation := newBookmarkSchemaMutation(c.config, OpUpdate)
	return &BookmarkSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BookmarkSchemaClient) UpdateOne(bs *BookmarkSchema) *BookmarkSchemaUpdateOne {
	mutation := newBookmarkSchemaMutation(c.config, OpUpdateOne, withBookmarkSchema(bs))
	return &BookmarkSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BookmarkSchemaClient) UpdateOneID(id int) *BookmarkSchemaUpdateOne {
	mutation := newBookmarkSchemaMutation(c.config, OpUpdateOne, withBookmarkSchemaID(id))
	return &BookmarkSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BookmarkSchema.
func (c *BookmarkSchemaClient) Delete() *BookmarkSchemaDelete {
	mutation := newBookmarkSchemaMutation(c.config, OpDelete)
	return &BookmarkSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BookmarkSchemaClient) DeleteOne(bs *BookmarkSchema) *BookmarkSchemaDeleteOne {
	return c.DeleteOneID(bs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BookmarkSchemaClient) DeleteOneID(id int) *BookmarkSchemaDeleteOne {
	builder := c.Delete().Where(bookmarkschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BookmarkSchemaDeleteOne{builder}
}

// Query returns a query builder for BookmarkSchema.
func (c *BookmarkSchemaClient) Query() *BookmarkSchemaQuery {
	return &BookmarkSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBookmarkSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a BookmarkSchema entity by its id.
func (c *BookmarkSchemaClient) Get(ctx context.Context, id int) (*BookmarkSchema, error) {
	return c.Query().Where(bookmarkschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BookmarkSchemaClient) GetX(ctx context.Context, id int) *BookmarkSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BookmarkSchemaClient) Hooks() []Hook {
	return c.hooks.BookmarkSchema
}

// Interceptors returns the client interceptors.
func (c *BookmarkSchemaClient) Interceptors() []Interceptor {
	return c.inters.BookmarkSchema
}

func (c *BookmarkSchemaClient) mutate(ctx context.Context, m *BookmarkSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BookmarkSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BookmarkSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BookmarkSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BookmarkSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BookmarkSchema mutation op: %q", m.Op())
	}
}

// CommentSchemaClient is a client for the CommentSchema schema.
type CommentSchemaClient struct {
	config
}

// NewCommentSchemaClient returns a client for the CommentSchema from the given config.
func NewCommentSchemaClient(c config) *CommentSchemaClient {
	return &CommentSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `commentschema.Hooks(f(g(h())))`.
func (c *CommentSchemaClient) Use(hooks ...Hook) {
	c.hooks.CommentSchema = append(c.hooks.CommentSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `commentschema.Intercept(f(g(h())))`.
func (c *CommentSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.CommentSchema = append(c.inters.CommentSchema, interceptors...)
}

// Create returns a builder for creating a CommentSchema entity.
func (c *CommentSchemaClient) Create() *CommentSchemaCreate {
	mutation := newCommentSchemaMutation(c.config, OpCreate)
	return &CommentSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CommentSchema entities.
func (c *CommentSchemaClient) CreateBulk(builders ...*CommentSchemaCreate) *CommentSchemaCreateBulk {
	return &CommentSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CommentSchema.
func (c *CommentSchemaClient) Update() *CommentSchemaUpdate {
	mutation := newCommentSchemaMutation(c.config, OpUpdate)
	return &CommentSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommentSchemaClient) UpdateOne(cs *CommentSchema) *CommentSchemaUpdateOne {
	mutation := newCommentSchemaMutation(c.config, OpUpdateOne, withCommentSchema(cs))
	return &CommentSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommentSchemaClient) UpdateOneID(id int) *CommentSchemaUpdateOne {
	mutation := newCommentSchemaMutation(c.config, OpUpdateOne, withCommentSchemaID(id))
	return &CommentSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CommentSchema.
func (c *CommentSchemaClient) Delete() *CommentSchemaDelete {
	mutation := newCommentSchemaMutation(c.config, OpDelete)
	return &CommentSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CommentSchemaClient) DeleteOne(cs *CommentSchema) *CommentSchemaDeleteOne {
	return c.DeleteOneID(cs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CommentSchemaClient) DeleteOneID(id int) *CommentSchemaDeleteOne {
	builder := c.Delete().Where(commentschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommentSchemaDeleteOne{builder}
}

// Query returns a query builder for CommentSchema.
func (c *CommentSchemaClient) Query() *CommentSchemaQuery {
	return &CommentSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCommentSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a CommentSchema entity by its id.
func (c *CommentSchemaClient) Get(ctx context.Context, id int) (*CommentSchema, error) {
	return c.Query().Where(commentschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommentSchemaClient) GetX(ctx context.Context, id int) *CommentSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CommentSchemaClient) Hooks() []Hook {
	return c.hooks.CommentSchema
}

// Interceptors returns the client interceptors.
func (c *CommentSchemaClient) Interceptors() []Interceptor {
	return c.inters.CommentSchema
}

func (c *CommentSchemaClient) mutate(ctx context.Context, m *CommentSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CommentSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CommentSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CommentSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CommentSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CommentSchema mutation op: %q", m.Op())
	}
}

// CompanySchemaClient is a client for the CompanySchema schema.
type CompanySchemaClient struct {
	config
}

// NewCompanySchemaClient returns a client for the CompanySchema from the given config.
func NewCompanySchemaClient(c config) *CompanySchemaClient {
	return &CompanySchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `companyschema.Hooks(f(g(h())))`.
func (c *CompanySchemaClient) Use(hooks ...Hook) {
	c.hooks.CompanySchema = append(c.hooks.CompanySchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `companyschema.Intercept(f(g(h())))`.
func (c *CompanySchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.CompanySchema = append(c.inters.CompanySchema, interceptors...)
}

// Create returns a builder for creating a CompanySchema entity.
func (c *CompanySchemaClient) Create() *CompanySchemaCreate {
	mutation := newCompanySchemaMutation(c.config, OpCreate)
	return &CompanySchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CompanySchema entities.
func (c *CompanySchemaClient) CreateBulk(builders ...*CompanySchemaCreate) *CompanySchemaCreateBulk {
	return &CompanySchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CompanySchema.
func (c *CompanySchemaClient) Update() *CompanySchemaUpdate {
	mutation := newCompanySchemaMutation(c.config, OpUpdate)
	return &CompanySchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CompanySchemaClient) UpdateOne(cs *CompanySchema) *CompanySchemaUpdateOne {
	mutation := newCompanySchemaMutation(c.config, OpUpdateOne, withCompanySchema(cs))
	return &CompanySchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CompanySchemaClient) UpdateOneID(id int) *CompanySchemaUpdateOne {
	mutation := newCompanySchemaMutation(c.config, OpUpdateOne, withCompanySchemaID(id))
	return &CompanySchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CompanySchema.
func (c *CompanySchemaClient) Delete() *CompanySchemaDelete {
	mutation := newCompanySchemaMutation(c.config, OpDelete)
	return &CompanySchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CompanySchemaClient) DeleteOne(cs *CompanySchema) *CompanySchemaDeleteOne {
	return c.DeleteOneID(cs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CompanySchemaClient) DeleteOneID(id int) *CompanySchemaDeleteOne {
	builder := c.Delete().Where(companyschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CompanySchemaDeleteOne{builder}
}

// Query returns a query builder for CompanySchema.
func (c *CompanySchemaClient) Query() *CompanySchemaQuery {
	return &CompanySchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCompanySchema},
		inters: c.Interceptors(),
	}
}

// Get returns a CompanySchema entity by its id.
func (c *CompanySchemaClient) Get(ctx context.Context, id int) (*CompanySchema, error) {
	return c.Query().Where(companyschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CompanySchemaClient) GetX(ctx context.Context, id int) *CompanySchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CompanySchemaClient) Hooks() []Hook {
	return c.hooks.CompanySchema
}

// Interceptors returns the client interceptors.
func (c *CompanySchemaClient) Interceptors() []Interceptor {
	return c.inters.CompanySchema
}

func (c *CompanySchemaClient) mutate(ctx context.Context, m *CompanySchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CompanySchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CompanySchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CompanySchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CompanySchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CompanySchema mutation op: %q", m.Op())
	}
}

// CoverLetterSchemaClient is a client for the CoverLetterSchema schema.
type CoverLetterSchemaClient struct {
	config
}

// NewCoverLetterSchemaClient returns a client for the CoverLetterSchema from the given config.
func NewCoverLetterSchemaClient(c config) *CoverLetterSchemaClient {
	return &CoverLetterSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coverletterschema.Hooks(f(g(h())))`.
func (c *CoverLetterSchemaClient) Use(hooks ...Hook) {
	c.hooks.CoverLetterSchema = append(c.hooks.CoverLetterSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `coverletterschema.Intercept(f(g(h())))`.
func (c *CoverLetterSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.CoverLetterSchema = append(c.inters.CoverLetterSchema, interceptors...)
}

// Create returns a builder for creating a CoverLetterSchema entity.
func (c *CoverLetterSchemaClient) Create() *CoverLetterSchemaCreate {
	mutation := newCoverLetterSchemaMutation(c.config, OpCreate)
	return &CoverLetterSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CoverLetterSchema entities.
func (c *CoverLetterSchemaClient) CreateBulk(builders ...*CoverLetterSchemaCreate) *CoverLetterSchemaCreateBulk {
	return &CoverLetterSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CoverLetterSchema.
func (c *CoverLetterSchemaClient) Update() *CoverLetterSchemaUpdate {
	mutation := newCoverLetterSchemaMutation(c.config, OpUpdate)
	return &CoverLetterSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CoverLetterSchemaClient) UpdateOne(cls *CoverLetterSchema) *CoverLetterSchemaUpdateOne {
	mutation := newCoverLetterSchemaMutation(c.config, OpUpdateOne, withCoverLetterSchema(cls))
	return &CoverLetterSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CoverLetterSchemaClient) UpdateOneID(id int) *CoverLetterSchemaUpdateOne {
	mutation := newCoverLetterSchemaMutation(c.config, OpUpdateOne, withCoverLetterSchemaID(id))
	return &CoverLetterSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CoverLetterSchema.
func (c *CoverLetterSchemaClient) Delete() *CoverLetterSchemaDelete {
	mutation := newCoverLetterSchemaMutation(c.config, OpDelete)
	return &CoverLetterSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CoverLetterSchemaClient) DeleteOne(cls *CoverLetterSchema) *CoverLetterSchemaDeleteOne {
	return c.DeleteOneID(cls.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CoverLetterSchemaClient) DeleteOneID(id int) *CoverLetterSchemaDeleteOne {
	builder := c.Delete().Where(coverletterschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CoverLetterSchemaDeleteOne{builder}
}

// Query returns a query builder for CoverLetterSchema.
func (c *CoverLetterSchemaClient) Query() *CoverLetterSchemaQuery {
	return &CoverLetterSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCoverLetterSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a CoverLetterSchema entity by its id.
func (c *CoverLetterSchemaClient) Get(ctx context.Context, id int) (*CoverLetterSchema, error) {
	return c.Query().Where(coverletterschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CoverLetterSchemaClient) GetX(ctx context.Context, id int) *CoverLetterSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CoverLetterSchemaClient) Hooks() []Hook {
	return c.hooks.CoverLetterSchema
}

// Interceptors returns the client interceptors.
func (c *CoverLetterSchemaClient) Interceptors() []Interceptor {
	return c.inters.CoverLetterSchema
}

func (c *CoverLetterSchemaClient) mutate(ctx context.Context, m *CoverLetterSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CoverLetterSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CoverLetterSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CoverLetterSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CoverLetterSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CoverLetterSchema mutation op: %q", m.Op())
	}
}

// ExperienceSchemaClient is a client for the ExperienceSchema schema.
type ExperienceSchemaClient struct {
	config
}

// NewExperienceSchemaClient returns a client for the ExperienceSchema from the given config.
func NewExperienceSchemaClient(c config) *ExperienceSchemaClient {
	return &ExperienceSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `experienceschema.Hooks(f(g(h())))`.
func (c *ExperienceSchemaClient) Use(hooks ...Hook) {
	c.hooks.ExperienceSchema = append(c.hooks.ExperienceSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `experienceschema.Intercept(f(g(h())))`.
func (c *ExperienceSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.ExperienceSchema = append(c.inters.ExperienceSchema, interceptors...)
}

// Create returns a builder for creating a ExperienceSchema entity.
func (c *ExperienceSchemaClient) Create() *ExperienceSchemaCreate {
	mutation := newExperienceSchemaMutation(c.config, OpCreate)
	return &ExperienceSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExperienceSchema entities.
func (c *ExperienceSchemaClient) CreateBulk(builders ...*ExperienceSchemaCreate) *ExperienceSchemaCreateBulk {
	return &ExperienceSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExperienceSchema.
func (c *ExperienceSchemaClient) Update() *ExperienceSchemaUpdate {
	mutation := newExperienceSchemaMutation(c.config, OpUpdate)
	return &ExperienceSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExperienceSchemaClient) UpdateOne(es *ExperienceSchema) *ExperienceSchemaUpdateOne {
	mutation := newExperienceSchemaMutation(c.config, OpUpdateOne, withExperienceSchema(es))
	return &ExperienceSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExperienceSchemaClient) UpdateOneID(id int) *ExperienceSchemaUpdateOne {
	mutation := newExperienceSchemaMutation(c.config, OpUpdateOne, withExperienceSchemaID(id))
	return &ExperienceSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExperienceSchema.
func (c *ExperienceSchemaClient) Delete() *ExperienceSchemaDelete {
	mutation := newExperienceSchemaMutation(c.config, OpDelete)
	return &ExperienceSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExperienceSchemaClient) DeleteOne(es *ExperienceSchema) *ExperienceSchemaDeleteOne {
	return c.DeleteOneID(es.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExperienceSchemaClient) DeleteOneID(id int) *ExperienceSchemaDeleteOne {
	builder := c.Delete().Where(experienceschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExperienceSchemaDeleteOne{builder}
}

// Query returns a query builder for ExperienceSchema.
func (c *ExperienceSchemaClient) Query() *ExperienceSchemaQuery {
	return &ExperienceSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExperienceSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a ExperienceSchema entity by its id.
func (c *ExperienceSchemaClient) Get(ctx context.Context, id int) (*ExperienceSchema, error) {
	return c.Query().Where(experienceschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExperienceSchemaClient) GetX(ctx context.Context, id int) *ExperienceSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ExperienceSchemaClient) Hooks() []Hook {
	return c.hooks.ExperienceSchema
}

// Interceptors returns the client interceptors.
func (c *ExperienceSchemaClient) Interceptors() []Interceptor {
	return c.inters.ExperienceSchema
}

func (c *ExperienceSchemaClient) mutate(ctx context.Context, m *ExperienceSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExperienceSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExperienceSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExperienceSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExperienceSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ExperienceSchema mutation op: %q", m.Op())
	}
}

// FollowSchemaClient is a client for the FollowSchema schema.
type FollowSchemaClient struct {
	config
}

// NewFollowSchemaClient returns a client for the FollowSchema from the given config.
func NewFollowSchemaClient(c config) *FollowSchemaClient {
	return &FollowSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `followschema.Hooks(f(g(h())))`.
func (c *FollowSchemaClient) Use(hooks ...Hook) {
	c.hooks.FollowSchema = append(c.hooks.FollowSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `followschema.Intercept(f(g(h())))`.
func (c *FollowSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.FollowSchema = append(c.inters.FollowSchema, interceptors...)
}

// Create returns a builder for creating a FollowSchema entity.
func (c *FollowSchemaClient) Create() *FollowSchemaCreate {
	mutation := newFollowSchemaMutation(c.config, OpCreate)
	return &FollowSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FollowSchema entities.
func (c *FollowSchemaClient) CreateBulk(builders ...*FollowSchemaCreate) *FollowSchemaCreateBulk {
	return &FollowSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FollowSchema.
func (c *FollowSchemaClient) Update() *FollowSchemaUpdate {
	mutation := newFollowSchemaMutation(c.config, OpUpdate)
	return &FollowSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FollowSchemaClient) UpdateOne(fs *FollowSchema) *FollowSchemaUpdateOne {
	mutation := newFollowSchemaMutation(c.config, OpUpdateOne, withFollowSchema(fs))
	return &FollowSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FollowSchemaClient) UpdateOneID(id int) *FollowSchemaUpdateOne {
	mutation := newFollowSchemaMutation(c.config, OpUpdateOne, withFollowSchemaID(id))
	return &FollowSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FollowSchema.
func (c *FollowSchemaClient) Delete() *FollowSchemaDelete {
	mutation := newFollowSchemaMutation(c.config, OpDelete)
	return &FollowSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FollowSchemaClient) DeleteOne(fs *FollowSchema) *FollowSchemaDeleteOne {
	return c.DeleteOneID(fs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FollowSchemaClient) DeleteOneID(id int) *FollowSchemaDeleteOne {
	builder := c.Delete().Where(followschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FollowSchemaDeleteOne{builder}
}

// Query returns a query builder for FollowSchema.
func (c *FollowSchemaClient) Query() *FollowSchemaQuery {
	return &FollowSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFollowSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a FollowSchema entity by its id.
func (c *FollowSchemaClient) Get(ctx context.Context, id int) (*FollowSchema, error) {
	return c.Query().Where(followschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FollowSchemaClient) GetX(ctx context.Context, id int) *FollowSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FollowSchemaClient) Hooks() []Hook {
	return c.hooks.FollowSchema
}

// Interceptors returns the client interceptors.
func (c *FollowSchemaClient) Interceptors() []Interceptor {
	return c.inters.FollowSchema
}

func (c *FollowSchemaClient) mutate(ctx context.Context, m *FollowSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FollowSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FollowSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FollowSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FollowSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FollowSchema mutation op: %q", m.Op())
	}
}

// ImageSchemaClient is a client for the ImageSchema schema.
type ImageSchemaClient struct {
	config
}

// NewImageSchemaClient returns a client for the ImageSchema from the given config.
func NewImageSchemaClient(c config) *ImageSchemaClient {
	return &ImageSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `imageschema.Hooks(f(g(h())))`.
func (c *ImageSchemaClient) Use(hooks ...Hook) {
	c.hooks.ImageSchema = append(c.hooks.ImageSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `imageschema.Intercept(f(g(h())))`.
func (c *ImageSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.ImageSchema = append(c.inters.ImageSchema, interceptors...)
}

// Create returns a builder for creating a ImageSchema entity.
func (c *ImageSchemaClient) Create() *ImageSchemaCreate {
	mutation := newImageSchemaMutation(c.config, OpCreate)
	return &ImageSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ImageSchema entities.
func (c *ImageSchemaClient) CreateBulk(builders ...*ImageSchemaCreate) *ImageSchemaCreateBulk {
	return &ImageSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ImageSchema.
func (c *ImageSchemaClient) Update() *ImageSchemaUpdate {
	mutation := newImageSchemaMutation(c.config, OpUpdate)
	return &ImageSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ImageSchemaClient) UpdateOne(is *ImageSchema) *ImageSchemaUpdateOne {
	mutation := newImageSchemaMutation(c.config, OpUpdateOne, withImageSchema(is))
	return &ImageSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ImageSchemaClient) UpdateOneID(id int) *ImageSchemaUpdateOne {
	mutation := newImageSchemaMutation(c.config, OpUpdateOne, withImageSchemaID(id))
	return &ImageSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ImageSchema.
func (c *ImageSchemaClient) Delete() *ImageSchemaDelete {
	mutation := newImageSchemaMutation(c.config, OpDelete)
	return &ImageSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ImageSchemaClient) DeleteOne(is *ImageSchema) *ImageSchemaDeleteOne {
	return c.DeleteOneID(is.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ImageSchemaClient) DeleteOneID(id int) *ImageSchemaDeleteOne {
	builder := c.Delete().Where(imageschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ImageSchemaDeleteOne{builder}
}

// Query returns a query builder for ImageSchema.
func (c *ImageSchemaClient) Query() *ImageSchemaQuery {
	return &ImageSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeImageSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a ImageSchema entity by its id.
func (c *ImageSchemaClient) Get(ctx context.Context, id int) (*ImageSchema, error) {
	return c.Query().Where(imageschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ImageSchemaClient) GetX(ctx context.Context, id int) *ImageSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ImageSchemaClient) Hooks() []Hook {
	return c.hooks.ImageSchema
}

// Interceptors returns the client interceptors.
func (c *ImageSchemaClient) Interceptors() []Interceptor {
	return c.inters.ImageSchema
}

func (c *ImageSchemaClient) mutate(ctx context.Context, m *ImageSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ImageSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ImageSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ImageSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ImageSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ImageSchema mutation op: %q", m.Op())
	}
}

// JobSchemaClient is a client for the JobSchema schema.
type JobSchemaClient struct {
	config
}

// NewJobSchemaClient returns a client for the JobSchema from the given config.
func NewJobSchemaClient(c config) *JobSchemaClient {
	return &JobSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobschema.Hooks(f(g(h())))`.
func (c *JobSchemaClient) Use(hooks ...Hook) {
	c.hooks.JobSchema = append(c.hooks.JobSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `jobschema.Intercept(f(g(h())))`.
func (c *JobSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.JobSchema = append(c.inters.JobSchema, interceptors...)
}

// Create returns a builder for creating a JobSchema entity.
func (c *JobSchemaClient) Create() *JobSchemaCreate {
	mutation := newJobSchemaMutation(c.config, OpCreate)
	return &JobSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobSchema entities.
func (c *JobSchemaClient) CreateBulk(builders ...*JobSchemaCreate) *JobSchemaCreateBulk {
	return &JobSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobSchema.
func (c *JobSchemaClient) Update() *JobSchemaUpdate {
	mutation := newJobSchemaMutation(c.config, OpUpdate)
	return &JobSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobSchemaClient) UpdateOne(js *JobSchema) *JobSchemaUpdateOne {
	mutation := newJobSchemaMutation(c.config, OpUpdateOne, withJobSchema(js))
	return &JobSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobSchemaClient) UpdateOneID(id int) *JobSchemaUpdateOne {
	mutation := newJobSchemaMutation(c.config, OpUpdateOne, withJobSchemaID(id))
	return &JobSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobSchema.
func (c *JobSchemaClient) Delete() *JobSchemaDelete {
	mutation := newJobSchemaMutation(c.config, OpDelete)
	return &JobSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobSchemaClient) DeleteOne(js *JobSchema) *JobSchemaDeleteOne {
	return c.DeleteOneID(js.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobSchemaClient) DeleteOneID(id int) *JobSchemaDeleteOne {
	builder := c.Delete().Where(jobschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobSchemaDeleteOne{builder}
}

// Query returns a query builder for JobSchema.
func (c *JobSchemaClient) Query() *JobSchemaQuery {
	return &JobSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJobSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a JobSchema entity by its id.
func (c *JobSchemaClient) Get(ctx context.Context, id int) (*JobSchema, error) {
	return c.Query().Where(jobschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobSchemaClient) GetX(ctx context.Context, id int) *JobSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *JobSchemaClient) Hooks() []Hook {
	return c.hooks.JobSchema
}

// Interceptors returns the client interceptors.
func (c *JobSchemaClient) Interceptors() []Interceptor {
	return c.inters.JobSchema
}

func (c *JobSchemaClient) mutate(ctx context.Context, m *JobSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown JobSchema mutation op: %q", m.Op())
	}
}

// LeetcodeSchemaClient is a client for the LeetcodeSchema schema.
type LeetcodeSchemaClient struct {
	config
}

// NewLeetcodeSchemaClient returns a client for the LeetcodeSchema from the given config.
func NewLeetcodeSchemaClient(c config) *LeetcodeSchemaClient {
	return &LeetcodeSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `leetcodeschema.Hooks(f(g(h())))`.
func (c *LeetcodeSchemaClient) Use(hooks ...Hook) {
	c.hooks.LeetcodeSchema = append(c.hooks.LeetcodeSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `leetcodeschema.Intercept(f(g(h())))`.
func (c *LeetcodeSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.LeetcodeSchema = append(c.inters.LeetcodeSchema, interceptors...)
}

// Create returns a builder for creating a LeetcodeSchema entity.
func (c *LeetcodeSchemaClient) Create() *LeetcodeSchemaCreate {
	mutation := newLeetcodeSchemaMutation(c.config, OpCreate)
	return &LeetcodeSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LeetcodeSchema entities.
func (c *LeetcodeSchemaClient) CreateBulk(builders ...*LeetcodeSchemaCreate) *LeetcodeSchemaCreateBulk {
	return &LeetcodeSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LeetcodeSchema.
func (c *LeetcodeSchemaClient) Update() *LeetcodeSchemaUpdate {
	mutation := newLeetcodeSchemaMutation(c.config, OpUpdate)
	return &LeetcodeSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LeetcodeSchemaClient) UpdateOne(ls *LeetcodeSchema) *LeetcodeSchemaUpdateOne {
	mutation := newLeetcodeSchemaMutation(c.config, OpUpdateOne, withLeetcodeSchema(ls))
	return &LeetcodeSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LeetcodeSchemaClient) UpdateOneID(id int) *LeetcodeSchemaUpdateOne {
	mutation := newLeetcodeSchemaMutation(c.config, OpUpdateOne, withLeetcodeSchemaID(id))
	return &LeetcodeSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LeetcodeSchema.
func (c *LeetcodeSchemaClient) Delete() *LeetcodeSchemaDelete {
	mutation := newLeetcodeSchemaMutation(c.config, OpDelete)
	return &LeetcodeSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LeetcodeSchemaClient) DeleteOne(ls *LeetcodeSchema) *LeetcodeSchemaDeleteOne {
	return c.DeleteOneID(ls.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LeetcodeSchemaClient) DeleteOneID(id int) *LeetcodeSchemaDeleteOne {
	builder := c.Delete().Where(leetcodeschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LeetcodeSchemaDeleteOne{builder}
}

// Query returns a query builder for LeetcodeSchema.
func (c *LeetcodeSchemaClient) Query() *LeetcodeSchemaQuery {
	return &LeetcodeSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLeetcodeSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a LeetcodeSchema entity by its id.
func (c *LeetcodeSchemaClient) Get(ctx context.Context, id int) (*LeetcodeSchema, error) {
	return c.Query().Where(leetcodeschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LeetcodeSchemaClient) GetX(ctx context.Context, id int) *LeetcodeSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LeetcodeSchemaClient) Hooks() []Hook {
	return c.hooks.LeetcodeSchema
}

// Interceptors returns the client interceptors.
func (c *LeetcodeSchemaClient) Interceptors() []Interceptor {
	return c.inters.LeetcodeSchema
}

func (c *LeetcodeSchemaClient) mutate(ctx context.Context, m *LeetcodeSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LeetcodeSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LeetcodeSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LeetcodeSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LeetcodeSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LeetcodeSchema mutation op: %q", m.Op())
	}
}

// LikeSchemaClient is a client for the LikeSchema schema.
type LikeSchemaClient struct {
	config
}

// NewLikeSchemaClient returns a client for the LikeSchema from the given config.
func NewLikeSchemaClient(c config) *LikeSchemaClient {
	return &LikeSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `likeschema.Hooks(f(g(h())))`.
func (c *LikeSchemaClient) Use(hooks ...Hook) {
	c.hooks.LikeSchema = append(c.hooks.LikeSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `likeschema.Intercept(f(g(h())))`.
func (c *LikeSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.LikeSchema = append(c.inters.LikeSchema, interceptors...)
}

// Create returns a builder for creating a LikeSchema entity.
func (c *LikeSchemaClient) Create() *LikeSchemaCreate {
	mutation := newLikeSchemaMutation(c.config, OpCreate)
	return &LikeSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LikeSchema entities.
func (c *LikeSchemaClient) CreateBulk(builders ...*LikeSchemaCreate) *LikeSchemaCreateBulk {
	return &LikeSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LikeSchema.
func (c *LikeSchemaClient) Update() *LikeSchemaUpdate {
	mutation := newLikeSchemaMutation(c.config, OpUpdate)
	return &LikeSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LikeSchemaClient) UpdateOne(ls *LikeSchema) *LikeSchemaUpdateOne {
	mutation := newLikeSchemaMutation(c.config, OpUpdateOne, withLikeSchema(ls))
	return &LikeSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LikeSchemaClient) UpdateOneID(id int) *LikeSchemaUpdateOne {
	mutation := newLikeSchemaMutation(c.config, OpUpdateOne, withLikeSchemaID(id))
	return &LikeSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LikeSchema.
func (c *LikeSchemaClient) Delete() *LikeSchemaDelete {
	mutation := newLikeSchemaMutation(c.config, OpDelete)
	return &LikeSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LikeSchemaClient) DeleteOne(ls *LikeSchema) *LikeSchemaDeleteOne {
	return c.DeleteOneID(ls.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LikeSchemaClient) DeleteOneID(id int) *LikeSchemaDeleteOne {
	builder := c.Delete().Where(likeschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LikeSchemaDeleteOne{builder}
}

// Query returns a query builder for LikeSchema.
func (c *LikeSchemaClient) Query() *LikeSchemaQuery {
	return &LikeSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLikeSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a LikeSchema entity by its id.
func (c *LikeSchemaClient) Get(ctx context.Context, id int) (*LikeSchema, error) {
	return c.Query().Where(likeschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LikeSchemaClient) GetX(ctx context.Context, id int) *LikeSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LikeSchemaClient) Hooks() []Hook {
	return c.hooks.LikeSchema
}

// Interceptors returns the client interceptors.
func (c *LikeSchemaClient) Interceptors() []Interceptor {
	return c.inters.LikeSchema
}

func (c *LikeSchemaClient) mutate(ctx context.Context, m *LikeSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LikeSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LikeSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LikeSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LikeSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LikeSchema mutation op: %q", m.Op())
	}
}

// LocationSchemaClient is a client for the LocationSchema schema.
type LocationSchemaClient struct {
	config
}

// NewLocationSchemaClient returns a client for the LocationSchema from the given config.
func NewLocationSchemaClient(c config) *LocationSchemaClient {
	return &LocationSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `locationschema.Hooks(f(g(h())))`.
func (c *LocationSchemaClient) Use(hooks ...Hook) {
	c.hooks.LocationSchema = append(c.hooks.LocationSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `locationschema.Intercept(f(g(h())))`.
func (c *LocationSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.LocationSchema = append(c.inters.LocationSchema, interceptors...)
}

// Create returns a builder for creating a LocationSchema entity.
func (c *LocationSchemaClient) Create() *LocationSchemaCreate {
	mutation := newLocationSchemaMutation(c.config, OpCreate)
	return &LocationSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LocationSchema entities.
func (c *LocationSchemaClient) CreateBulk(builders ...*LocationSchemaCreate) *LocationSchemaCreateBulk {
	return &LocationSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LocationSchema.
func (c *LocationSchemaClient) Update() *LocationSchemaUpdate {
	mutation := newLocationSchemaMutation(c.config, OpUpdate)
	return &LocationSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LocationSchemaClient) UpdateOne(ls *LocationSchema) *LocationSchemaUpdateOne {
	mutation := newLocationSchemaMutation(c.config, OpUpdateOne, withLocationSchema(ls))
	return &LocationSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LocationSchemaClient) UpdateOneID(id int) *LocationSchemaUpdateOne {
	mutation := newLocationSchemaMutation(c.config, OpUpdateOne, withLocationSchemaID(id))
	return &LocationSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LocationSchema.
func (c *LocationSchemaClient) Delete() *LocationSchemaDelete {
	mutation := newLocationSchemaMutation(c.config, OpDelete)
	return &LocationSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LocationSchemaClient) DeleteOne(ls *LocationSchema) *LocationSchemaDeleteOne {
	return c.DeleteOneID(ls.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LocationSchemaClient) DeleteOneID(id int) *LocationSchemaDeleteOne {
	builder := c.Delete().Where(locationschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LocationSchemaDeleteOne{builder}
}

// Query returns a query builder for LocationSchema.
func (c *LocationSchemaClient) Query() *LocationSchemaQuery {
	return &LocationSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLocationSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a LocationSchema entity by its id.
func (c *LocationSchemaClient) Get(ctx context.Context, id int) (*LocationSchema, error) {
	return c.Query().Where(locationschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LocationSchemaClient) GetX(ctx context.Context, id int) *LocationSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LocationSchemaClient) Hooks() []Hook {
	return c.hooks.LocationSchema
}

// Interceptors returns the client interceptors.
func (c *LocationSchemaClient) Interceptors() []Interceptor {
	return c.inters.LocationSchema
}

func (c *LocationSchemaClient) mutate(ctx context.Context, m *LocationSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LocationSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LocationSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LocationSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LocationSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LocationSchema mutation op: %q", m.Op())
	}
}

// LogoSchemaClient is a client for the LogoSchema schema.
type LogoSchemaClient struct {
	config
}

// NewLogoSchemaClient returns a client for the LogoSchema from the given config.
func NewLogoSchemaClient(c config) *LogoSchemaClient {
	return &LogoSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `logoschema.Hooks(f(g(h())))`.
func (c *LogoSchemaClient) Use(hooks ...Hook) {
	c.hooks.LogoSchema = append(c.hooks.LogoSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `logoschema.Intercept(f(g(h())))`.
func (c *LogoSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.LogoSchema = append(c.inters.LogoSchema, interceptors...)
}

// Create returns a builder for creating a LogoSchema entity.
func (c *LogoSchemaClient) Create() *LogoSchemaCreate {
	mutation := newLogoSchemaMutation(c.config, OpCreate)
	return &LogoSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LogoSchema entities.
func (c *LogoSchemaClient) CreateBulk(builders ...*LogoSchemaCreate) *LogoSchemaCreateBulk {
	return &LogoSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LogoSchema.
func (c *LogoSchemaClient) Update() *LogoSchemaUpdate {
	mutation := newLogoSchemaMutation(c.config, OpUpdate)
	return &LogoSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LogoSchemaClient) UpdateOne(ls *LogoSchema) *LogoSchemaUpdateOne {
	mutation := newLogoSchemaMutation(c.config, OpUpdateOne, withLogoSchema(ls))
	return &LogoSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LogoSchemaClient) UpdateOneID(id int) *LogoSchemaUpdateOne {
	mutation := newLogoSchemaMutation(c.config, OpUpdateOne, withLogoSchemaID(id))
	return &LogoSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LogoSchema.
func (c *LogoSchemaClient) Delete() *LogoSchemaDelete {
	mutation := newLogoSchemaMutation(c.config, OpDelete)
	return &LogoSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LogoSchemaClient) DeleteOne(ls *LogoSchema) *LogoSchemaDeleteOne {
	return c.DeleteOneID(ls.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LogoSchemaClient) DeleteOneID(id int) *LogoSchemaDeleteOne {
	builder := c.Delete().Where(logoschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LogoSchemaDeleteOne{builder}
}

// Query returns a query builder for LogoSchema.
func (c *LogoSchemaClient) Query() *LogoSchemaQuery {
	return &LogoSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLogoSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a LogoSchema entity by its id.
func (c *LogoSchemaClient) Get(ctx context.Context, id int) (*LogoSchema, error) {
	return c.Query().Where(logoschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LogoSchemaClient) GetX(ctx context.Context, id int) *LogoSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LogoSchemaClient) Hooks() []Hook {
	return c.hooks.LogoSchema
}

// Interceptors returns the client interceptors.
func (c *LogoSchemaClient) Interceptors() []Interceptor {
	return c.inters.LogoSchema
}

func (c *LogoSchemaClient) mutate(ctx context.Context, m *LogoSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LogoSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LogoSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LogoSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LogoSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LogoSchema mutation op: %q", m.Op())
	}
}

// NamecardSchemaClient is a client for the NamecardSchema schema.
type NamecardSchemaClient struct {
	config
}

// NewNamecardSchemaClient returns a client for the NamecardSchema from the given config.
func NewNamecardSchemaClient(c config) *NamecardSchemaClient {
	return &NamecardSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `namecardschema.Hooks(f(g(h())))`.
func (c *NamecardSchemaClient) Use(hooks ...Hook) {
	c.hooks.NamecardSchema = append(c.hooks.NamecardSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `namecardschema.Intercept(f(g(h())))`.
func (c *NamecardSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.NamecardSchema = append(c.inters.NamecardSchema, interceptors...)
}

// Create returns a builder for creating a NamecardSchema entity.
func (c *NamecardSchemaClient) Create() *NamecardSchemaCreate {
	mutation := newNamecardSchemaMutation(c.config, OpCreate)
	return &NamecardSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NamecardSchema entities.
func (c *NamecardSchemaClient) CreateBulk(builders ...*NamecardSchemaCreate) *NamecardSchemaCreateBulk {
	return &NamecardSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NamecardSchema.
func (c *NamecardSchemaClient) Update() *NamecardSchemaUpdate {
	mutation := newNamecardSchemaMutation(c.config, OpUpdate)
	return &NamecardSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NamecardSchemaClient) UpdateOne(ns *NamecardSchema) *NamecardSchemaUpdateOne {
	mutation := newNamecardSchemaMutation(c.config, OpUpdateOne, withNamecardSchema(ns))
	return &NamecardSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NamecardSchemaClient) UpdateOneID(id int) *NamecardSchemaUpdateOne {
	mutation := newNamecardSchemaMutation(c.config, OpUpdateOne, withNamecardSchemaID(id))
	return &NamecardSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NamecardSchema.
func (c *NamecardSchemaClient) Delete() *NamecardSchemaDelete {
	mutation := newNamecardSchemaMutation(c.config, OpDelete)
	return &NamecardSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NamecardSchemaClient) DeleteOne(ns *NamecardSchema) *NamecardSchemaDeleteOne {
	return c.DeleteOneID(ns.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NamecardSchemaClient) DeleteOneID(id int) *NamecardSchemaDeleteOne {
	builder := c.Delete().Where(namecardschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NamecardSchemaDeleteOne{builder}
}

// Query returns a query builder for NamecardSchema.
func (c *NamecardSchemaClient) Query() *NamecardSchemaQuery {
	return &NamecardSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNamecardSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a NamecardSchema entity by its id.
func (c *NamecardSchemaClient) Get(ctx context.Context, id int) (*NamecardSchema, error) {
	return c.Query().Where(namecardschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NamecardSchemaClient) GetX(ctx context.Context, id int) *NamecardSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a NamecardSchema.
func (c *NamecardSchemaClient) QueryUser(ns *NamecardSchema) *UserSchemaQuery {
	query := (&UserSchemaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ns.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(namecardschema.Table, namecardschema.FieldID, id),
			sqlgraph.To(userschema.Table, userschema.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, namecardschema.UserTable, namecardschema.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ns.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NamecardSchemaClient) Hooks() []Hook {
	return c.hooks.NamecardSchema
}

// Interceptors returns the client interceptors.
func (c *NamecardSchemaClient) Interceptors() []Interceptor {
	return c.inters.NamecardSchema
}

func (c *NamecardSchemaClient) mutate(ctx context.Context, m *NamecardSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NamecardSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NamecardSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NamecardSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NamecardSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NamecardSchema mutation op: %q", m.Op())
	}
}

// NotificationSchemaClient is a client for the NotificationSchema schema.
type NotificationSchemaClient struct {
	config
}

// NewNotificationSchemaClient returns a client for the NotificationSchema from the given config.
func NewNotificationSchemaClient(c config) *NotificationSchemaClient {
	return &NotificationSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notificationschema.Hooks(f(g(h())))`.
func (c *NotificationSchemaClient) Use(hooks ...Hook) {
	c.hooks.NotificationSchema = append(c.hooks.NotificationSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notificationschema.Intercept(f(g(h())))`.
func (c *NotificationSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotificationSchema = append(c.inters.NotificationSchema, interceptors...)
}

// Create returns a builder for creating a NotificationSchema entity.
func (c *NotificationSchemaClient) Create() *NotificationSchemaCreate {
	mutation := newNotificationSchemaMutation(c.config, OpCreate)
	return &NotificationSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotificationSchema entities.
func (c *NotificationSchemaClient) CreateBulk(builders ...*NotificationSchemaCreate) *NotificationSchemaCreateBulk {
	return &NotificationSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotificationSchema.
func (c *NotificationSchemaClient) Update() *NotificationSchemaUpdate {
	mutation := newNotificationSchemaMutation(c.config, OpUpdate)
	return &NotificationSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotificationSchemaClient) UpdateOne(ns *NotificationSchema) *NotificationSchemaUpdateOne {
	mutation := newNotificationSchemaMutation(c.config, OpUpdateOne, withNotificationSchema(ns))
	return &NotificationSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotificationSchemaClient) UpdateOneID(id int) *NotificationSchemaUpdateOne {
	mutation := newNotificationSchemaMutation(c.config, OpUpdateOne, withNotificationSchemaID(id))
	return &NotificationSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotificationSchema.
func (c *NotificationSchemaClient) Delete() *NotificationSchemaDelete {
	mutation := newNotificationSchemaMutation(c.config, OpDelete)
	return &NotificationSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotificationSchemaClient) DeleteOne(ns *NotificationSchema) *NotificationSchemaDeleteOne {
	return c.DeleteOneID(ns.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotificationSchemaClient) DeleteOneID(id int) *NotificationSchemaDeleteOne {
	builder := c.Delete().Where(notificationschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotificationSchemaDeleteOne{builder}
}

// Query returns a query builder for NotificationSchema.
func (c *NotificationSchemaClient) Query() *NotificationSchemaQuery {
	return &NotificationSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotificationSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a NotificationSchema entity by its id.
func (c *NotificationSchemaClient) Get(ctx context.Context, id int) (*NotificationSchema, error) {
	return c.Query().Where(notificationschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotificationSchemaClient) GetX(ctx context.Context, id int) *NotificationSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NotificationSchemaClient) Hooks() []Hook {
	return c.hooks.NotificationSchema
}

// Interceptors returns the client interceptors.
func (c *NotificationSchemaClient) Interceptors() []Interceptor {
	return c.inters.NotificationSchema
}

func (c *NotificationSchemaClient) mutate(ctx context.Context, m *NotificationSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotificationSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotificationSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotificationSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotificationSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NotificationSchema mutation op: %q", m.Op())
	}
}

// PaymentSchemaClient is a client for the PaymentSchema schema.
type PaymentSchemaClient struct {
	config
}

// NewPaymentSchemaClient returns a client for the PaymentSchema from the given config.
func NewPaymentSchemaClient(c config) *PaymentSchemaClient {
	return &PaymentSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymentschema.Hooks(f(g(h())))`.
func (c *PaymentSchemaClient) Use(hooks ...Hook) {
	c.hooks.PaymentSchema = append(c.hooks.PaymentSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `paymentschema.Intercept(f(g(h())))`.
func (c *PaymentSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.PaymentSchema = append(c.inters.PaymentSchema, interceptors...)
}

// Create returns a builder for creating a PaymentSchema entity.
func (c *PaymentSchemaClient) Create() *PaymentSchemaCreate {
	mutation := newPaymentSchemaMutation(c.config, OpCreate)
	return &PaymentSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaymentSchema entities.
func (c *PaymentSchemaClient) CreateBulk(builders ...*PaymentSchemaCreate) *PaymentSchemaCreateBulk {
	return &PaymentSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaymentSchema.
func (c *PaymentSchemaClient) Update() *PaymentSchemaUpdate {
	mutation := newPaymentSchemaMutation(c.config, OpUpdate)
	return &PaymentSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentSchemaClient) UpdateOne(ps *PaymentSchema) *PaymentSchemaUpdateOne {
	mutation := newPaymentSchemaMutation(c.config, OpUpdateOne, withPaymentSchema(ps))
	return &PaymentSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentSchemaClient) UpdateOneID(id int) *PaymentSchemaUpdateOne {
	mutation := newPaymentSchemaMutation(c.config, OpUpdateOne, withPaymentSchemaID(id))
	return &PaymentSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaymentSchema.
func (c *PaymentSchemaClient) Delete() *PaymentSchemaDelete {
	mutation := newPaymentSchemaMutation(c.config, OpDelete)
	return &PaymentSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentSchemaClient) DeleteOne(ps *PaymentSchema) *PaymentSchemaDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentSchemaClient) DeleteOneID(id int) *PaymentSchemaDeleteOne {
	builder := c.Delete().Where(paymentschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentSchemaDeleteOne{builder}
}

// Query returns a query builder for PaymentSchema.
func (c *PaymentSchemaClient) Query() *PaymentSchemaQuery {
	return &PaymentSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePaymentSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a PaymentSchema entity by its id.
func (c *PaymentSchemaClient) Get(ctx context.Context, id int) (*PaymentSchema, error) {
	return c.Query().Where(paymentschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentSchemaClient) GetX(ctx context.Context, id int) *PaymentSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PaymentSchemaClient) Hooks() []Hook {
	return c.hooks.PaymentSchema
}

// Interceptors returns the client interceptors.
func (c *PaymentSchemaClient) Interceptors() []Interceptor {
	return c.inters.PaymentSchema
}

func (c *PaymentSchemaClient) mutate(ctx context.Context, m *PaymentSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PaymentSchema mutation op: %q", m.Op())
	}
}

// PersonalizationSchemaClient is a client for the PersonalizationSchema schema.
type PersonalizationSchemaClient struct {
	config
}

// NewPersonalizationSchemaClient returns a client for the PersonalizationSchema from the given config.
func NewPersonalizationSchemaClient(c config) *PersonalizationSchemaClient {
	return &PersonalizationSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `personalizationschema.Hooks(f(g(h())))`.
func (c *PersonalizationSchemaClient) Use(hooks ...Hook) {
	c.hooks.PersonalizationSchema = append(c.hooks.PersonalizationSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `personalizationschema.Intercept(f(g(h())))`.
func (c *PersonalizationSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.PersonalizationSchema = append(c.inters.PersonalizationSchema, interceptors...)
}

// Create returns a builder for creating a PersonalizationSchema entity.
func (c *PersonalizationSchemaClient) Create() *PersonalizationSchemaCreate {
	mutation := newPersonalizationSchemaMutation(c.config, OpCreate)
	return &PersonalizationSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PersonalizationSchema entities.
func (c *PersonalizationSchemaClient) CreateBulk(builders ...*PersonalizationSchemaCreate) *PersonalizationSchemaCreateBulk {
	return &PersonalizationSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PersonalizationSchema.
func (c *PersonalizationSchemaClient) Update() *PersonalizationSchemaUpdate {
	mutation := newPersonalizationSchemaMutation(c.config, OpUpdate)
	return &PersonalizationSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PersonalizationSchemaClient) UpdateOne(ps *PersonalizationSchema) *PersonalizationSchemaUpdateOne {
	mutation := newPersonalizationSchemaMutation(c.config, OpUpdateOne, withPersonalizationSchema(ps))
	return &PersonalizationSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PersonalizationSchemaClient) UpdateOneID(id int) *PersonalizationSchemaUpdateOne {
	mutation := newPersonalizationSchemaMutation(c.config, OpUpdateOne, withPersonalizationSchemaID(id))
	return &PersonalizationSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PersonalizationSchema.
func (c *PersonalizationSchemaClient) Delete() *PersonalizationSchemaDelete {
	mutation := newPersonalizationSchemaMutation(c.config, OpDelete)
	return &PersonalizationSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PersonalizationSchemaClient) DeleteOne(ps *PersonalizationSchema) *PersonalizationSchemaDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PersonalizationSchemaClient) DeleteOneID(id int) *PersonalizationSchemaDeleteOne {
	builder := c.Delete().Where(personalizationschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PersonalizationSchemaDeleteOne{builder}
}

// Query returns a query builder for PersonalizationSchema.
func (c *PersonalizationSchemaClient) Query() *PersonalizationSchemaQuery {
	return &PersonalizationSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePersonalizationSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a PersonalizationSchema entity by its id.
func (c *PersonalizationSchemaClient) Get(ctx context.Context, id int) (*PersonalizationSchema, error) {
	return c.Query().Where(personalizationschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PersonalizationSchemaClient) GetX(ctx context.Context, id int) *PersonalizationSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a PersonalizationSchema.
func (c *PersonalizationSchemaClient) QueryUser(ps *PersonalizationSchema) *UserSchemaQuery {
	query := (&UserSchemaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(personalizationschema.Table, personalizationschema.FieldID, id),
			sqlgraph.To(userschema.Table, userschema.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, personalizationschema.UserTable, personalizationschema.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PersonalizationSchemaClient) Hooks() []Hook {
	return c.hooks.PersonalizationSchema
}

// Interceptors returns the client interceptors.
func (c *PersonalizationSchemaClient) Interceptors() []Interceptor {
	return c.inters.PersonalizationSchema
}

func (c *PersonalizationSchemaClient) mutate(ctx context.Context, m *PersonalizationSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PersonalizationSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PersonalizationSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PersonalizationSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PersonalizationSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PersonalizationSchema mutation op: %q", m.Op())
	}
}

// PhoneSchemaClient is a client for the PhoneSchema schema.
type PhoneSchemaClient struct {
	config
}

// NewPhoneSchemaClient returns a client for the PhoneSchema from the given config.
func NewPhoneSchemaClient(c config) *PhoneSchemaClient {
	return &PhoneSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `phoneschema.Hooks(f(g(h())))`.
func (c *PhoneSchemaClient) Use(hooks ...Hook) {
	c.hooks.PhoneSchema = append(c.hooks.PhoneSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `phoneschema.Intercept(f(g(h())))`.
func (c *PhoneSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.PhoneSchema = append(c.inters.PhoneSchema, interceptors...)
}

// Create returns a builder for creating a PhoneSchema entity.
func (c *PhoneSchemaClient) Create() *PhoneSchemaCreate {
	mutation := newPhoneSchemaMutation(c.config, OpCreate)
	return &PhoneSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PhoneSchema entities.
func (c *PhoneSchemaClient) CreateBulk(builders ...*PhoneSchemaCreate) *PhoneSchemaCreateBulk {
	return &PhoneSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PhoneSchema.
func (c *PhoneSchemaClient) Update() *PhoneSchemaUpdate {
	mutation := newPhoneSchemaMutation(c.config, OpUpdate)
	return &PhoneSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PhoneSchemaClient) UpdateOne(ps *PhoneSchema) *PhoneSchemaUpdateOne {
	mutation := newPhoneSchemaMutation(c.config, OpUpdateOne, withPhoneSchema(ps))
	return &PhoneSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PhoneSchemaClient) UpdateOneID(id int) *PhoneSchemaUpdateOne {
	mutation := newPhoneSchemaMutation(c.config, OpUpdateOne, withPhoneSchemaID(id))
	return &PhoneSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PhoneSchema.
func (c *PhoneSchemaClient) Delete() *PhoneSchemaDelete {
	mutation := newPhoneSchemaMutation(c.config, OpDelete)
	return &PhoneSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PhoneSchemaClient) DeleteOne(ps *PhoneSchema) *PhoneSchemaDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PhoneSchemaClient) DeleteOneID(id int) *PhoneSchemaDeleteOne {
	builder := c.Delete().Where(phoneschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PhoneSchemaDeleteOne{builder}
}

// Query returns a query builder for PhoneSchema.
func (c *PhoneSchemaClient) Query() *PhoneSchemaQuery {
	return &PhoneSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePhoneSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a PhoneSchema entity by its id.
func (c *PhoneSchemaClient) Get(ctx context.Context, id int) (*PhoneSchema, error) {
	return c.Query().Where(phoneschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PhoneSchemaClient) GetX(ctx context.Context, id int) *PhoneSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a PhoneSchema.
func (c *PhoneSchemaClient) QueryOwner(ps *PhoneSchema) *ProfileSchemaQuery {
	query := (&ProfileSchemaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(phoneschema.Table, phoneschema.FieldID, id),
			sqlgraph.To(profileschema.Table, profileschema.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, phoneschema.OwnerTable, phoneschema.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PhoneSchemaClient) Hooks() []Hook {
	return c.hooks.PhoneSchema
}

// Interceptors returns the client interceptors.
func (c *PhoneSchemaClient) Interceptors() []Interceptor {
	return c.inters.PhoneSchema
}

func (c *PhoneSchemaClient) mutate(ctx context.Context, m *PhoneSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PhoneSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PhoneSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PhoneSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PhoneSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PhoneSchema mutation op: %q", m.Op())
	}
}

// PhotoSchemaClient is a client for the PhotoSchema schema.
type PhotoSchemaClient struct {
	config
}

// NewPhotoSchemaClient returns a client for the PhotoSchema from the given config.
func NewPhotoSchemaClient(c config) *PhotoSchemaClient {
	return &PhotoSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `photoschema.Hooks(f(g(h())))`.
func (c *PhotoSchemaClient) Use(hooks ...Hook) {
	c.hooks.PhotoSchema = append(c.hooks.PhotoSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `photoschema.Intercept(f(g(h())))`.
func (c *PhotoSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.PhotoSchema = append(c.inters.PhotoSchema, interceptors...)
}

// Create returns a builder for creating a PhotoSchema entity.
func (c *PhotoSchemaClient) Create() *PhotoSchemaCreate {
	mutation := newPhotoSchemaMutation(c.config, OpCreate)
	return &PhotoSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PhotoSchema entities.
func (c *PhotoSchemaClient) CreateBulk(builders ...*PhotoSchemaCreate) *PhotoSchemaCreateBulk {
	return &PhotoSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PhotoSchema.
func (c *PhotoSchemaClient) Update() *PhotoSchemaUpdate {
	mutation := newPhotoSchemaMutation(c.config, OpUpdate)
	return &PhotoSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PhotoSchemaClient) UpdateOne(ps *PhotoSchema) *PhotoSchemaUpdateOne {
	mutation := newPhotoSchemaMutation(c.config, OpUpdateOne, withPhotoSchema(ps))
	return &PhotoSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PhotoSchemaClient) UpdateOneID(id int) *PhotoSchemaUpdateOne {
	mutation := newPhotoSchemaMutation(c.config, OpUpdateOne, withPhotoSchemaID(id))
	return &PhotoSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PhotoSchema.
func (c *PhotoSchemaClient) Delete() *PhotoSchemaDelete {
	mutation := newPhotoSchemaMutation(c.config, OpDelete)
	return &PhotoSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PhotoSchemaClient) DeleteOne(ps *PhotoSchema) *PhotoSchemaDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PhotoSchemaClient) DeleteOneID(id int) *PhotoSchemaDeleteOne {
	builder := c.Delete().Where(photoschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PhotoSchemaDeleteOne{builder}
}

// Query returns a query builder for PhotoSchema.
func (c *PhotoSchemaClient) Query() *PhotoSchemaQuery {
	return &PhotoSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePhotoSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a PhotoSchema entity by its id.
func (c *PhotoSchemaClient) Get(ctx context.Context, id int) (*PhotoSchema, error) {
	return c.Query().Where(photoschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PhotoSchemaClient) GetX(ctx context.Context, id int) *PhotoSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a PhotoSchema.
func (c *PhotoSchemaClient) QueryOwner(ps *PhotoSchema) *ProfileSchemaQuery {
	query := (&ProfileSchemaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(photoschema.Table, photoschema.FieldID, id),
			sqlgraph.To(profileschema.Table, profileschema.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, photoschema.OwnerTable, photoschema.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PhotoSchemaClient) Hooks() []Hook {
	return c.hooks.PhotoSchema
}

// Interceptors returns the client interceptors.
func (c *PhotoSchemaClient) Interceptors() []Interceptor {
	return c.inters.PhotoSchema
}

func (c *PhotoSchemaClient) mutate(ctx context.Context, m *PhotoSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PhotoSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PhotoSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PhotoSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PhotoSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PhotoSchema mutation op: %q", m.Op())
	}
}

// PoolSchemaClient is a client for the PoolSchema schema.
type PoolSchemaClient struct {
	config
}

// NewPoolSchemaClient returns a client for the PoolSchema from the given config.
func NewPoolSchemaClient(c config) *PoolSchemaClient {
	return &PoolSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `poolschema.Hooks(f(g(h())))`.
func (c *PoolSchemaClient) Use(hooks ...Hook) {
	c.hooks.PoolSchema = append(c.hooks.PoolSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `poolschema.Intercept(f(g(h())))`.
func (c *PoolSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.PoolSchema = append(c.inters.PoolSchema, interceptors...)
}

// Create returns a builder for creating a PoolSchema entity.
func (c *PoolSchemaClient) Create() *PoolSchemaCreate {
	mutation := newPoolSchemaMutation(c.config, OpCreate)
	return &PoolSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PoolSchema entities.
func (c *PoolSchemaClient) CreateBulk(builders ...*PoolSchemaCreate) *PoolSchemaCreateBulk {
	return &PoolSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PoolSchema.
func (c *PoolSchemaClient) Update() *PoolSchemaUpdate {
	mutation := newPoolSchemaMutation(c.config, OpUpdate)
	return &PoolSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PoolSchemaClient) UpdateOne(ps *PoolSchema) *PoolSchemaUpdateOne {
	mutation := newPoolSchemaMutation(c.config, OpUpdateOne, withPoolSchema(ps))
	return &PoolSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PoolSchemaClient) UpdateOneID(id int) *PoolSchemaUpdateOne {
	mutation := newPoolSchemaMutation(c.config, OpUpdateOne, withPoolSchemaID(id))
	return &PoolSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PoolSchema.
func (c *PoolSchemaClient) Delete() *PoolSchemaDelete {
	mutation := newPoolSchemaMutation(c.config, OpDelete)
	return &PoolSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PoolSchemaClient) DeleteOne(ps *PoolSchema) *PoolSchemaDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PoolSchemaClient) DeleteOneID(id int) *PoolSchemaDeleteOne {
	builder := c.Delete().Where(poolschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PoolSchemaDeleteOne{builder}
}

// Query returns a query builder for PoolSchema.
func (c *PoolSchemaClient) Query() *PoolSchemaQuery {
	return &PoolSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePoolSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a PoolSchema entity by its id.
func (c *PoolSchemaClient) Get(ctx context.Context, id int) (*PoolSchema, error) {
	return c.Query().Where(poolschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PoolSchemaClient) GetX(ctx context.Context, id int) *PoolSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PoolSchemaClient) Hooks() []Hook {
	return c.hooks.PoolSchema
}

// Interceptors returns the client interceptors.
func (c *PoolSchemaClient) Interceptors() []Interceptor {
	return c.inters.PoolSchema
}

func (c *PoolSchemaClient) mutate(ctx context.Context, m *PoolSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PoolSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PoolSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PoolSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PoolSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PoolSchema mutation op: %q", m.Op())
	}
}

// PortfolioSchemaClient is a client for the PortfolioSchema schema.
type PortfolioSchemaClient struct {
	config
}

// NewPortfolioSchemaClient returns a client for the PortfolioSchema from the given config.
func NewPortfolioSchemaClient(c config) *PortfolioSchemaClient {
	return &PortfolioSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `portfolioschema.Hooks(f(g(h())))`.
func (c *PortfolioSchemaClient) Use(hooks ...Hook) {
	c.hooks.PortfolioSchema = append(c.hooks.PortfolioSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `portfolioschema.Intercept(f(g(h())))`.
func (c *PortfolioSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.PortfolioSchema = append(c.inters.PortfolioSchema, interceptors...)
}

// Create returns a builder for creating a PortfolioSchema entity.
func (c *PortfolioSchemaClient) Create() *PortfolioSchemaCreate {
	mutation := newPortfolioSchemaMutation(c.config, OpCreate)
	return &PortfolioSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PortfolioSchema entities.
func (c *PortfolioSchemaClient) CreateBulk(builders ...*PortfolioSchemaCreate) *PortfolioSchemaCreateBulk {
	return &PortfolioSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PortfolioSchema.
func (c *PortfolioSchemaClient) Update() *PortfolioSchemaUpdate {
	mutation := newPortfolioSchemaMutation(c.config, OpUpdate)
	return &PortfolioSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PortfolioSchemaClient) UpdateOne(ps *PortfolioSchema) *PortfolioSchemaUpdateOne {
	mutation := newPortfolioSchemaMutation(c.config, OpUpdateOne, withPortfolioSchema(ps))
	return &PortfolioSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PortfolioSchemaClient) UpdateOneID(id int) *PortfolioSchemaUpdateOne {
	mutation := newPortfolioSchemaMutation(c.config, OpUpdateOne, withPortfolioSchemaID(id))
	return &PortfolioSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PortfolioSchema.
func (c *PortfolioSchemaClient) Delete() *PortfolioSchemaDelete {
	mutation := newPortfolioSchemaMutation(c.config, OpDelete)
	return &PortfolioSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PortfolioSchemaClient) DeleteOne(ps *PortfolioSchema) *PortfolioSchemaDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PortfolioSchemaClient) DeleteOneID(id int) *PortfolioSchemaDeleteOne {
	builder := c.Delete().Where(portfolioschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PortfolioSchemaDeleteOne{builder}
}

// Query returns a query builder for PortfolioSchema.
func (c *PortfolioSchemaClient) Query() *PortfolioSchemaQuery {
	return &PortfolioSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePortfolioSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a PortfolioSchema entity by its id.
func (c *PortfolioSchemaClient) Get(ctx context.Context, id int) (*PortfolioSchema, error) {
	return c.Query().Where(portfolioschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PortfolioSchemaClient) GetX(ctx context.Context, id int) *PortfolioSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PortfolioSchemaClient) Hooks() []Hook {
	return c.hooks.PortfolioSchema
}

// Interceptors returns the client interceptors.
func (c *PortfolioSchemaClient) Interceptors() []Interceptor {
	return c.inters.PortfolioSchema
}

func (c *PortfolioSchemaClient) mutate(ctx context.Context, m *PortfolioSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PortfolioSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PortfolioSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PortfolioSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PortfolioSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PortfolioSchema mutation op: %q", m.Op())
	}
}

// PositionSchemaClient is a client for the PositionSchema schema.
type PositionSchemaClient struct {
	config
}

// NewPositionSchemaClient returns a client for the PositionSchema from the given config.
func NewPositionSchemaClient(c config) *PositionSchemaClient {
	return &PositionSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `positionschema.Hooks(f(g(h())))`.
func (c *PositionSchemaClient) Use(hooks ...Hook) {
	c.hooks.PositionSchema = append(c.hooks.PositionSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `positionschema.Intercept(f(g(h())))`.
func (c *PositionSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.PositionSchema = append(c.inters.PositionSchema, interceptors...)
}

// Create returns a builder for creating a PositionSchema entity.
func (c *PositionSchemaClient) Create() *PositionSchemaCreate {
	mutation := newPositionSchemaMutation(c.config, OpCreate)
	return &PositionSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PositionSchema entities.
func (c *PositionSchemaClient) CreateBulk(builders ...*PositionSchemaCreate) *PositionSchemaCreateBulk {
	return &PositionSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PositionSchema.
func (c *PositionSchemaClient) Update() *PositionSchemaUpdate {
	mutation := newPositionSchemaMutation(c.config, OpUpdate)
	return &PositionSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PositionSchemaClient) UpdateOne(ps *PositionSchema) *PositionSchemaUpdateOne {
	mutation := newPositionSchemaMutation(c.config, OpUpdateOne, withPositionSchema(ps))
	return &PositionSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PositionSchemaClient) UpdateOneID(id int) *PositionSchemaUpdateOne {
	mutation := newPositionSchemaMutation(c.config, OpUpdateOne, withPositionSchemaID(id))
	return &PositionSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PositionSchema.
func (c *PositionSchemaClient) Delete() *PositionSchemaDelete {
	mutation := newPositionSchemaMutation(c.config, OpDelete)
	return &PositionSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PositionSchemaClient) DeleteOne(ps *PositionSchema) *PositionSchemaDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PositionSchemaClient) DeleteOneID(id int) *PositionSchemaDeleteOne {
	builder := c.Delete().Where(positionschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PositionSchemaDeleteOne{builder}
}

// Query returns a query builder for PositionSchema.
func (c *PositionSchemaClient) Query() *PositionSchemaQuery {
	return &PositionSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePositionSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a PositionSchema entity by its id.
func (c *PositionSchemaClient) Get(ctx context.Context, id int) (*PositionSchema, error) {
	return c.Query().Where(positionschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PositionSchemaClient) GetX(ctx context.Context, id int) *PositionSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PositionSchemaClient) Hooks() []Hook {
	return c.hooks.PositionSchema
}

// Interceptors returns the client interceptors.
func (c *PositionSchemaClient) Interceptors() []Interceptor {
	return c.inters.PositionSchema
}

func (c *PositionSchemaClient) mutate(ctx context.Context, m *PositionSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PositionSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PositionSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PositionSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PositionSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PositionSchema mutation op: %q", m.Op())
	}
}

// ProfileSchemaClient is a client for the ProfileSchema schema.
type ProfileSchemaClient struct {
	config
}

// NewProfileSchemaClient returns a client for the ProfileSchema from the given config.
func NewProfileSchemaClient(c config) *ProfileSchemaClient {
	return &ProfileSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `profileschema.Hooks(f(g(h())))`.
func (c *ProfileSchemaClient) Use(hooks ...Hook) {
	c.hooks.ProfileSchema = append(c.hooks.ProfileSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `profileschema.Intercept(f(g(h())))`.
func (c *ProfileSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProfileSchema = append(c.inters.ProfileSchema, interceptors...)
}

// Create returns a builder for creating a ProfileSchema entity.
func (c *ProfileSchemaClient) Create() *ProfileSchemaCreate {
	mutation := newProfileSchemaMutation(c.config, OpCreate)
	return &ProfileSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProfileSchema entities.
func (c *ProfileSchemaClient) CreateBulk(builders ...*ProfileSchemaCreate) *ProfileSchemaCreateBulk {
	return &ProfileSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProfileSchema.
func (c *ProfileSchemaClient) Update() *ProfileSchemaUpdate {
	mutation := newProfileSchemaMutation(c.config, OpUpdate)
	return &ProfileSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProfileSchemaClient) UpdateOne(ps *ProfileSchema) *ProfileSchemaUpdateOne {
	mutation := newProfileSchemaMutation(c.config, OpUpdateOne, withProfileSchema(ps))
	return &ProfileSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProfileSchemaClient) UpdateOneID(id int) *ProfileSchemaUpdateOne {
	mutation := newProfileSchemaMutation(c.config, OpUpdateOne, withProfileSchemaID(id))
	return &ProfileSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProfileSchema.
func (c *ProfileSchemaClient) Delete() *ProfileSchemaDelete {
	mutation := newProfileSchemaMutation(c.config, OpDelete)
	return &ProfileSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProfileSchemaClient) DeleteOne(ps *ProfileSchema) *ProfileSchemaDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProfileSchemaClient) DeleteOneID(id int) *ProfileSchemaDeleteOne {
	builder := c.Delete().Where(profileschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProfileSchemaDeleteOne{builder}
}

// Query returns a query builder for ProfileSchema.
func (c *ProfileSchemaClient) Query() *ProfileSchemaQuery {
	return &ProfileSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProfileSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a ProfileSchema entity by its id.
func (c *ProfileSchemaClient) Get(ctx context.Context, id int) (*ProfileSchema, error) {
	return c.Query().Where(profileschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProfileSchemaClient) GetX(ctx context.Context, id int) *ProfileSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a ProfileSchema.
func (c *ProfileSchemaClient) QueryOwner(ps *ProfileSchema) *UserSchemaQuery {
	query := (&UserSchemaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profileschema.Table, profileschema.FieldID, id),
			sqlgraph.To(userschema.Table, userschema.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, profileschema.OwnerTable, profileschema.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPhoto queries the photo edge of a ProfileSchema.
func (c *ProfileSchemaClient) QueryPhoto(ps *ProfileSchema) *PhotoSchemaQuery {
	query := (&PhotoSchemaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profileschema.Table, profileschema.FieldID, id),
			sqlgraph.To(photoschema.Table, photoschema.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, profileschema.PhotoTable, profileschema.PhotoColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPhone queries the phone edge of a ProfileSchema.
func (c *ProfileSchemaClient) QueryPhone(ps *ProfileSchema) *PhoneSchemaQuery {
	query := (&PhoneSchemaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profileschema.Table, profileschema.FieldID, id),
			sqlgraph.To(phoneschema.Table, phoneschema.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, profileschema.PhoneTable, profileschema.PhoneColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProfileSchemaClient) Hooks() []Hook {
	return c.hooks.ProfileSchema
}

// Interceptors returns the client interceptors.
func (c *ProfileSchemaClient) Interceptors() []Interceptor {
	return c.inters.ProfileSchema
}

func (c *ProfileSchemaClient) mutate(ctx context.Context, m *ProfileSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProfileSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProfileSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProfileSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProfileSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProfileSchema mutation op: %q", m.Op())
	}
}

// ReferrerSchemaClient is a client for the ReferrerSchema schema.
type ReferrerSchemaClient struct {
	config
}

// NewReferrerSchemaClient returns a client for the ReferrerSchema from the given config.
func NewReferrerSchemaClient(c config) *ReferrerSchemaClient {
	return &ReferrerSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `referrerschema.Hooks(f(g(h())))`.
func (c *ReferrerSchemaClient) Use(hooks ...Hook) {
	c.hooks.ReferrerSchema = append(c.hooks.ReferrerSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `referrerschema.Intercept(f(g(h())))`.
func (c *ReferrerSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.ReferrerSchema = append(c.inters.ReferrerSchema, interceptors...)
}

// Create returns a builder for creating a ReferrerSchema entity.
func (c *ReferrerSchemaClient) Create() *ReferrerSchemaCreate {
	mutation := newReferrerSchemaMutation(c.config, OpCreate)
	return &ReferrerSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ReferrerSchema entities.
func (c *ReferrerSchemaClient) CreateBulk(builders ...*ReferrerSchemaCreate) *ReferrerSchemaCreateBulk {
	return &ReferrerSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ReferrerSchema.
func (c *ReferrerSchemaClient) Update() *ReferrerSchemaUpdate {
	mutation := newReferrerSchemaMutation(c.config, OpUpdate)
	return &ReferrerSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReferrerSchemaClient) UpdateOne(rs *ReferrerSchema) *ReferrerSchemaUpdateOne {
	mutation := newReferrerSchemaMutation(c.config, OpUpdateOne, withReferrerSchema(rs))
	return &ReferrerSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReferrerSchemaClient) UpdateOneID(id int) *ReferrerSchemaUpdateOne {
	mutation := newReferrerSchemaMutation(c.config, OpUpdateOne, withReferrerSchemaID(id))
	return &ReferrerSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ReferrerSchema.
func (c *ReferrerSchemaClient) Delete() *ReferrerSchemaDelete {
	mutation := newReferrerSchemaMutation(c.config, OpDelete)
	return &ReferrerSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReferrerSchemaClient) DeleteOne(rs *ReferrerSchema) *ReferrerSchemaDeleteOne {
	return c.DeleteOneID(rs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ReferrerSchemaClient) DeleteOneID(id int) *ReferrerSchemaDeleteOne {
	builder := c.Delete().Where(referrerschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReferrerSchemaDeleteOne{builder}
}

// Query returns a query builder for ReferrerSchema.
func (c *ReferrerSchemaClient) Query() *ReferrerSchemaQuery {
	return &ReferrerSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReferrerSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a ReferrerSchema entity by its id.
func (c *ReferrerSchemaClient) Get(ctx context.Context, id int) (*ReferrerSchema, error) {
	return c.Query().Where(referrerschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReferrerSchemaClient) GetX(ctx context.Context, id int) *ReferrerSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a ReferrerSchema.
func (c *ReferrerSchemaClient) QueryUser(rs *ReferrerSchema) *UserSchemaQuery {
	query := (&UserSchemaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(referrerschema.Table, referrerschema.FieldID, id),
			sqlgraph.To(userschema.Table, userschema.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, referrerschema.UserTable, referrerschema.UserColumn),
		)
		fromV = sqlgraph.Neighbors(rs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ReferrerSchemaClient) Hooks() []Hook {
	return c.hooks.ReferrerSchema
}

// Interceptors returns the client interceptors.
func (c *ReferrerSchemaClient) Interceptors() []Interceptor {
	return c.inters.ReferrerSchema
}

func (c *ReferrerSchemaClient) mutate(ctx context.Context, m *ReferrerSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ReferrerSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ReferrerSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ReferrerSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ReferrerSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ReferrerSchema mutation op: %q", m.Op())
	}
}

// ResumeSchemaClient is a client for the ResumeSchema schema.
type ResumeSchemaClient struct {
	config
}

// NewResumeSchemaClient returns a client for the ResumeSchema from the given config.
func NewResumeSchemaClient(c config) *ResumeSchemaClient {
	return &ResumeSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `resumeschema.Hooks(f(g(h())))`.
func (c *ResumeSchemaClient) Use(hooks ...Hook) {
	c.hooks.ResumeSchema = append(c.hooks.ResumeSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `resumeschema.Intercept(f(g(h())))`.
func (c *ResumeSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.ResumeSchema = append(c.inters.ResumeSchema, interceptors...)
}

// Create returns a builder for creating a ResumeSchema entity.
func (c *ResumeSchemaClient) Create() *ResumeSchemaCreate {
	mutation := newResumeSchemaMutation(c.config, OpCreate)
	return &ResumeSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ResumeSchema entities.
func (c *ResumeSchemaClient) CreateBulk(builders ...*ResumeSchemaCreate) *ResumeSchemaCreateBulk {
	return &ResumeSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ResumeSchema.
func (c *ResumeSchemaClient) Update() *ResumeSchemaUpdate {
	mutation := newResumeSchemaMutation(c.config, OpUpdate)
	return &ResumeSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResumeSchemaClient) UpdateOne(rs *ResumeSchema) *ResumeSchemaUpdateOne {
	mutation := newResumeSchemaMutation(c.config, OpUpdateOne, withResumeSchema(rs))
	return &ResumeSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResumeSchemaClient) UpdateOneID(id int) *ResumeSchemaUpdateOne {
	mutation := newResumeSchemaMutation(c.config, OpUpdateOne, withResumeSchemaID(id))
	return &ResumeSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ResumeSchema.
func (c *ResumeSchemaClient) Delete() *ResumeSchemaDelete {
	mutation := newResumeSchemaMutation(c.config, OpDelete)
	return &ResumeSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ResumeSchemaClient) DeleteOne(rs *ResumeSchema) *ResumeSchemaDeleteOne {
	return c.DeleteOneID(rs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ResumeSchemaClient) DeleteOneID(id int) *ResumeSchemaDeleteOne {
	builder := c.Delete().Where(resumeschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResumeSchemaDeleteOne{builder}
}

// Query returns a query builder for ResumeSchema.
func (c *ResumeSchemaClient) Query() *ResumeSchemaQuery {
	return &ResumeSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeResumeSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a ResumeSchema entity by its id.
func (c *ResumeSchemaClient) Get(ctx context.Context, id int) (*ResumeSchema, error) {
	return c.Query().Where(resumeschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResumeSchemaClient) GetX(ctx context.Context, id int) *ResumeSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ResumeSchemaClient) Hooks() []Hook {
	return c.hooks.ResumeSchema
}

// Interceptors returns the client interceptors.
func (c *ResumeSchemaClient) Interceptors() []Interceptor {
	return c.inters.ResumeSchema
}

func (c *ResumeSchemaClient) mutate(ctx context.Context, m *ResumeSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ResumeSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ResumeSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ResumeSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ResumeSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ResumeSchema mutation op: %q", m.Op())
	}
}

// RoleSchemaClient is a client for the RoleSchema schema.
type RoleSchemaClient struct {
	config
}

// NewRoleSchemaClient returns a client for the RoleSchema from the given config.
func NewRoleSchemaClient(c config) *RoleSchemaClient {
	return &RoleSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `roleschema.Hooks(f(g(h())))`.
func (c *RoleSchemaClient) Use(hooks ...Hook) {
	c.hooks.RoleSchema = append(c.hooks.RoleSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `roleschema.Intercept(f(g(h())))`.
func (c *RoleSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.RoleSchema = append(c.inters.RoleSchema, interceptors...)
}

// Create returns a builder for creating a RoleSchema entity.
func (c *RoleSchemaClient) Create() *RoleSchemaCreate {
	mutation := newRoleSchemaMutation(c.config, OpCreate)
	return &RoleSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RoleSchema entities.
func (c *RoleSchemaClient) CreateBulk(builders ...*RoleSchemaCreate) *RoleSchemaCreateBulk {
	return &RoleSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RoleSchema.
func (c *RoleSchemaClient) Update() *RoleSchemaUpdate {
	mutation := newRoleSchemaMutation(c.config, OpUpdate)
	return &RoleSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleSchemaClient) UpdateOne(rs *RoleSchema) *RoleSchemaUpdateOne {
	mutation := newRoleSchemaMutation(c.config, OpUpdateOne, withRoleSchema(rs))
	return &RoleSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleSchemaClient) UpdateOneID(id int) *RoleSchemaUpdateOne {
	mutation := newRoleSchemaMutation(c.config, OpUpdateOne, withRoleSchemaID(id))
	return &RoleSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RoleSchema.
func (c *RoleSchemaClient) Delete() *RoleSchemaDelete {
	mutation := newRoleSchemaMutation(c.config, OpDelete)
	return &RoleSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoleSchemaClient) DeleteOne(rs *RoleSchema) *RoleSchemaDeleteOne {
	return c.DeleteOneID(rs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoleSchemaClient) DeleteOneID(id int) *RoleSchemaDeleteOne {
	builder := c.Delete().Where(roleschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoleSchemaDeleteOne{builder}
}

// Query returns a query builder for RoleSchema.
func (c *RoleSchemaClient) Query() *RoleSchemaQuery {
	return &RoleSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRoleSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a RoleSchema entity by its id.
func (c *RoleSchemaClient) Get(ctx context.Context, id int) (*RoleSchema, error) {
	return c.Query().Where(roleschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleSchemaClient) GetX(ctx context.Context, id int) *RoleSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a RoleSchema.
func (c *RoleSchemaClient) QueryUser(rs *RoleSchema) *UserSchemaQuery {
	query := (&UserSchemaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roleschema.Table, roleschema.FieldID, id),
			sqlgraph.To(userschema.Table, userschema.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, roleschema.UserTable, roleschema.UserColumn),
		)
		fromV = sqlgraph.Neighbors(rs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoleSchemaClient) Hooks() []Hook {
	return c.hooks.RoleSchema
}

// Interceptors returns the client interceptors.
func (c *RoleSchemaClient) Interceptors() []Interceptor {
	return c.inters.RoleSchema
}

func (c *RoleSchemaClient) mutate(ctx context.Context, m *RoleSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoleSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoleSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoleSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoleSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RoleSchema mutation op: %q", m.Op())
	}
}

// SkillSchemaClient is a client for the SkillSchema schema.
type SkillSchemaClient struct {
	config
}

// NewSkillSchemaClient returns a client for the SkillSchema from the given config.
func NewSkillSchemaClient(c config) *SkillSchemaClient {
	return &SkillSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `skillschema.Hooks(f(g(h())))`.
func (c *SkillSchemaClient) Use(hooks ...Hook) {
	c.hooks.SkillSchema = append(c.hooks.SkillSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `skillschema.Intercept(f(g(h())))`.
func (c *SkillSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.SkillSchema = append(c.inters.SkillSchema, interceptors...)
}

// Create returns a builder for creating a SkillSchema entity.
func (c *SkillSchemaClient) Create() *SkillSchemaCreate {
	mutation := newSkillSchemaMutation(c.config, OpCreate)
	return &SkillSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SkillSchema entities.
func (c *SkillSchemaClient) CreateBulk(builders ...*SkillSchemaCreate) *SkillSchemaCreateBulk {
	return &SkillSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SkillSchema.
func (c *SkillSchemaClient) Update() *SkillSchemaUpdate {
	mutation := newSkillSchemaMutation(c.config, OpUpdate)
	return &SkillSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SkillSchemaClient) UpdateOne(ss *SkillSchema) *SkillSchemaUpdateOne {
	mutation := newSkillSchemaMutation(c.config, OpUpdateOne, withSkillSchema(ss))
	return &SkillSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SkillSchemaClient) UpdateOneID(id int) *SkillSchemaUpdateOne {
	mutation := newSkillSchemaMutation(c.config, OpUpdateOne, withSkillSchemaID(id))
	return &SkillSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SkillSchema.
func (c *SkillSchemaClient) Delete() *SkillSchemaDelete {
	mutation := newSkillSchemaMutation(c.config, OpDelete)
	return &SkillSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SkillSchemaClient) DeleteOne(ss *SkillSchema) *SkillSchemaDeleteOne {
	return c.DeleteOneID(ss.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SkillSchemaClient) DeleteOneID(id int) *SkillSchemaDeleteOne {
	builder := c.Delete().Where(skillschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SkillSchemaDeleteOne{builder}
}

// Query returns a query builder for SkillSchema.
func (c *SkillSchemaClient) Query() *SkillSchemaQuery {
	return &SkillSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSkillSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a SkillSchema entity by its id.
func (c *SkillSchemaClient) Get(ctx context.Context, id int) (*SkillSchema, error) {
	return c.Query().Where(skillschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SkillSchemaClient) GetX(ctx context.Context, id int) *SkillSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SkillSchemaClient) Hooks() []Hook {
	return c.hooks.SkillSchema
}

// Interceptors returns the client interceptors.
func (c *SkillSchemaClient) Interceptors() []Interceptor {
	return c.inters.SkillSchema
}

func (c *SkillSchemaClient) mutate(ctx context.Context, m *SkillSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SkillSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SkillSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SkillSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SkillSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SkillSchema mutation op: %q", m.Op())
	}
}

// SubscribeSchemaClient is a client for the SubscribeSchema schema.
type SubscribeSchemaClient struct {
	config
}

// NewSubscribeSchemaClient returns a client for the SubscribeSchema from the given config.
func NewSubscribeSchemaClient(c config) *SubscribeSchemaClient {
	return &SubscribeSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subscribeschema.Hooks(f(g(h())))`.
func (c *SubscribeSchemaClient) Use(hooks ...Hook) {
	c.hooks.SubscribeSchema = append(c.hooks.SubscribeSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subscribeschema.Intercept(f(g(h())))`.
func (c *SubscribeSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.SubscribeSchema = append(c.inters.SubscribeSchema, interceptors...)
}

// Create returns a builder for creating a SubscribeSchema entity.
func (c *SubscribeSchemaClient) Create() *SubscribeSchemaCreate {
	mutation := newSubscribeSchemaMutation(c.config, OpCreate)
	return &SubscribeSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubscribeSchema entities.
func (c *SubscribeSchemaClient) CreateBulk(builders ...*SubscribeSchemaCreate) *SubscribeSchemaCreateBulk {
	return &SubscribeSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubscribeSchema.
func (c *SubscribeSchemaClient) Update() *SubscribeSchemaUpdate {
	mutation := newSubscribeSchemaMutation(c.config, OpUpdate)
	return &SubscribeSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubscribeSchemaClient) UpdateOne(ss *SubscribeSchema) *SubscribeSchemaUpdateOne {
	mutation := newSubscribeSchemaMutation(c.config, OpUpdateOne, withSubscribeSchema(ss))
	return &SubscribeSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubscribeSchemaClient) UpdateOneID(id int) *SubscribeSchemaUpdateOne {
	mutation := newSubscribeSchemaMutation(c.config, OpUpdateOne, withSubscribeSchemaID(id))
	return &SubscribeSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubscribeSchema.
func (c *SubscribeSchemaClient) Delete() *SubscribeSchemaDelete {
	mutation := newSubscribeSchemaMutation(c.config, OpDelete)
	return &SubscribeSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubscribeSchemaClient) DeleteOne(ss *SubscribeSchema) *SubscribeSchemaDeleteOne {
	return c.DeleteOneID(ss.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubscribeSchemaClient) DeleteOneID(id int) *SubscribeSchemaDeleteOne {
	builder := c.Delete().Where(subscribeschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubscribeSchemaDeleteOne{builder}
}

// Query returns a query builder for SubscribeSchema.
func (c *SubscribeSchemaClient) Query() *SubscribeSchemaQuery {
	return &SubscribeSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubscribeSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a SubscribeSchema entity by its id.
func (c *SubscribeSchemaClient) Get(ctx context.Context, id int) (*SubscribeSchema, error) {
	return c.Query().Where(subscribeschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubscribeSchemaClient) GetX(ctx context.Context, id int) *SubscribeSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SubscribeSchemaClient) Hooks() []Hook {
	return c.hooks.SubscribeSchema
}

// Interceptors returns the client interceptors.
func (c *SubscribeSchemaClient) Interceptors() []Interceptor {
	return c.inters.SubscribeSchema
}

func (c *SubscribeSchemaClient) mutate(ctx context.Context, m *SubscribeSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubscribeSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubscribeSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubscribeSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubscribeSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SubscribeSchema mutation op: %q", m.Op())
	}
}

// ThreadSchemaClient is a client for the ThreadSchema schema.
type ThreadSchemaClient struct {
	config
}

// NewThreadSchemaClient returns a client for the ThreadSchema from the given config.
func NewThreadSchemaClient(c config) *ThreadSchemaClient {
	return &ThreadSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `threadschema.Hooks(f(g(h())))`.
func (c *ThreadSchemaClient) Use(hooks ...Hook) {
	c.hooks.ThreadSchema = append(c.hooks.ThreadSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `threadschema.Intercept(f(g(h())))`.
func (c *ThreadSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.ThreadSchema = append(c.inters.ThreadSchema, interceptors...)
}

// Create returns a builder for creating a ThreadSchema entity.
func (c *ThreadSchemaClient) Create() *ThreadSchemaCreate {
	mutation := newThreadSchemaMutation(c.config, OpCreate)
	return &ThreadSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ThreadSchema entities.
func (c *ThreadSchemaClient) CreateBulk(builders ...*ThreadSchemaCreate) *ThreadSchemaCreateBulk {
	return &ThreadSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ThreadSchema.
func (c *ThreadSchemaClient) Update() *ThreadSchemaUpdate {
	mutation := newThreadSchemaMutation(c.config, OpUpdate)
	return &ThreadSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ThreadSchemaClient) UpdateOne(ts *ThreadSchema) *ThreadSchemaUpdateOne {
	mutation := newThreadSchemaMutation(c.config, OpUpdateOne, withThreadSchema(ts))
	return &ThreadSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ThreadSchemaClient) UpdateOneID(id int) *ThreadSchemaUpdateOne {
	mutation := newThreadSchemaMutation(c.config, OpUpdateOne, withThreadSchemaID(id))
	return &ThreadSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ThreadSchema.
func (c *ThreadSchemaClient) Delete() *ThreadSchemaDelete {
	mutation := newThreadSchemaMutation(c.config, OpDelete)
	return &ThreadSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ThreadSchemaClient) DeleteOne(ts *ThreadSchema) *ThreadSchemaDeleteOne {
	return c.DeleteOneID(ts.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ThreadSchemaClient) DeleteOneID(id int) *ThreadSchemaDeleteOne {
	builder := c.Delete().Where(threadschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ThreadSchemaDeleteOne{builder}
}

// Query returns a query builder for ThreadSchema.
func (c *ThreadSchemaClient) Query() *ThreadSchemaQuery {
	return &ThreadSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeThreadSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a ThreadSchema entity by its id.
func (c *ThreadSchemaClient) Get(ctx context.Context, id int) (*ThreadSchema, error) {
	return c.Query().Where(threadschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ThreadSchemaClient) GetX(ctx context.Context, id int) *ThreadSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ThreadSchemaClient) Hooks() []Hook {
	return c.hooks.ThreadSchema
}

// Interceptors returns the client interceptors.
func (c *ThreadSchemaClient) Interceptors() []Interceptor {
	return c.inters.ThreadSchema
}

func (c *ThreadSchemaClient) mutate(ctx context.Context, m *ThreadSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ThreadSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ThreadSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ThreadSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ThreadSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ThreadSchema mutation op: %q", m.Op())
	}
}

// UserSchemaClient is a client for the UserSchema schema.
type UserSchemaClient struct {
	config
}

// NewUserSchemaClient returns a client for the UserSchema from the given config.
func NewUserSchemaClient(c config) *UserSchemaClient {
	return &UserSchemaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userschema.Hooks(f(g(h())))`.
func (c *UserSchemaClient) Use(hooks ...Hook) {
	c.hooks.UserSchema = append(c.hooks.UserSchema, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userschema.Intercept(f(g(h())))`.
func (c *UserSchemaClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserSchema = append(c.inters.UserSchema, interceptors...)
}

// Create returns a builder for creating a UserSchema entity.
func (c *UserSchemaClient) Create() *UserSchemaCreate {
	mutation := newUserSchemaMutation(c.config, OpCreate)
	return &UserSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserSchema entities.
func (c *UserSchemaClient) CreateBulk(builders ...*UserSchemaCreate) *UserSchemaCreateBulk {
	return &UserSchemaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserSchema.
func (c *UserSchemaClient) Update() *UserSchemaUpdate {
	mutation := newUserSchemaMutation(c.config, OpUpdate)
	return &UserSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserSchemaClient) UpdateOne(us *UserSchema) *UserSchemaUpdateOne {
	mutation := newUserSchemaMutation(c.config, OpUpdateOne, withUserSchema(us))
	return &UserSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserSchemaClient) UpdateOneID(id int) *UserSchemaUpdateOne {
	mutation := newUserSchemaMutation(c.config, OpUpdateOne, withUserSchemaID(id))
	return &UserSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserSchema.
func (c *UserSchemaClient) Delete() *UserSchemaDelete {
	mutation := newUserSchemaMutation(c.config, OpDelete)
	return &UserSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserSchemaClient) DeleteOne(us *UserSchema) *UserSchemaDeleteOne {
	return c.DeleteOneID(us.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserSchemaClient) DeleteOneID(id int) *UserSchemaDeleteOne {
	builder := c.Delete().Where(userschema.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserSchemaDeleteOne{builder}
}

// Query returns a query builder for UserSchema.
func (c *UserSchemaClient) Query() *UserSchemaQuery {
	return &UserSchemaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserSchema},
		inters: c.Interceptors(),
	}
}

// Get returns a UserSchema entity by its id.
func (c *UserSchemaClient) Get(ctx context.Context, id int) (*UserSchema, error) {
	return c.Query().Where(userschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserSchemaClient) GetX(ctx context.Context, id int) *UserSchema {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoles queries the roles edge of a UserSchema.
func (c *UserSchemaClient) QueryRoles(us *UserSchema) *RoleSchemaQuery {
	query := (&RoleSchemaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := us.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userschema.Table, userschema.FieldID, id),
			sqlgraph.To(roleschema.Table, roleschema.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, userschema.RolesTable, userschema.RolesColumn),
		)
		fromV = sqlgraph.Neighbors(us.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProfile queries the profile edge of a UserSchema.
func (c *UserSchemaClient) QueryProfile(us *UserSchema) *ProfileSchemaQuery {
	query := (&ProfileSchemaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := us.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userschema.Table, userschema.FieldID, id),
			sqlgraph.To(profileschema.Table, profileschema.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, userschema.ProfileTable, userschema.ProfileColumn),
		)
		fromV = sqlgraph.Neighbors(us.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFollow queries the follow edge of a UserSchema.
func (c *UserSchemaClient) QueryFollow(us *UserSchema) *FollowSchemaQuery {
	query := (&FollowSchemaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := us.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userschema.Table, userschema.FieldID, id),
			sqlgraph.To(followschema.Table, followschema.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userschema.FollowTable, userschema.FollowColumn),
		)
		fromV = sqlgraph.Neighbors(us.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReferrer queries the referrer edge of a UserSchema.
func (c *UserSchemaClient) QueryReferrer(us *UserSchema) *ReferrerSchemaQuery {
	query := (&ReferrerSchemaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := us.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userschema.Table, userschema.FieldID, id),
			sqlgraph.To(referrerschema.Table, referrerschema.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, userschema.ReferrerTable, userschema.ReferrerColumn),
		)
		fromV = sqlgraph.Neighbors(us.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPersonalization queries the personalization edge of a UserSchema.
func (c *UserSchemaClient) QueryPersonalization(us *UserSchema) *PersonalizationSchemaQuery {
	query := (&PersonalizationSchemaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := us.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userschema.Table, userschema.FieldID, id),
			sqlgraph.To(personalizationschema.Table, personalizationschema.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, userschema.PersonalizationTable, userschema.PersonalizationColumn),
		)
		fromV = sqlgraph.Neighbors(us.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNamecard queries the namecard edge of a UserSchema.
func (c *UserSchemaClient) QueryNamecard(us *UserSchema) *NamecardSchemaQuery {
	query := (&NamecardSchemaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := us.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userschema.Table, userschema.FieldID, id),
			sqlgraph.To(namecardschema.Table, namecardschema.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, userschema.NamecardTable, userschema.NamecardColumn),
		)
		fromV = sqlgraph.Neighbors(us.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserSchemaClient) Hooks() []Hook {
	return c.hooks.UserSchema
}

// Interceptors returns the client interceptors.
func (c *UserSchemaClient) Interceptors() []Interceptor {
	return c.inters.UserSchema
}

func (c *UserSchemaClient) mutate(ctx context.Context, m *UserSchemaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserSchemaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserSchemaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserSchemaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserSchemaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserSchema mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		ApplicationSchema, AssignmentSchema, BadgeSchema, BookmarkSchema, CommentSchema,
		CompanySchema, CoverLetterSchema, ExperienceSchema, FollowSchema, ImageSchema,
		JobSchema, LeetcodeSchema, LikeSchema, LocationSchema, LogoSchema,
		NamecardSchema, NotificationSchema, PaymentSchema, PersonalizationSchema,
		PhoneSchema, PhotoSchema, PoolSchema, PortfolioSchema, PositionSchema,
		ProfileSchema, ReferrerSchema, ResumeSchema, RoleSchema, SkillSchema,
		SubscribeSchema, ThreadSchema, UserSchema []ent.Hook
	}
	inters struct {
		ApplicationSchema, AssignmentSchema, BadgeSchema, BookmarkSchema, CommentSchema,
		CompanySchema, CoverLetterSchema, ExperienceSchema, FollowSchema, ImageSchema,
		JobSchema, LeetcodeSchema, LikeSchema, LocationSchema, LogoSchema,
		NamecardSchema, NotificationSchema, PaymentSchema, PersonalizationSchema,
		PhoneSchema, PhotoSchema, PoolSchema, PortfolioSchema, PositionSchema,
		ProfileSchema, ReferrerSchema, ResumeSchema, RoleSchema, SkillSchema,
		SubscribeSchema, ThreadSchema, UserSchema []ent.Interceptor
	}
)
