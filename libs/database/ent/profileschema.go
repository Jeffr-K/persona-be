// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"persona/libs/database/ent/phoneschema"
	"persona/libs/database/ent/photoschema"
	"persona/libs/database/ent/profileschema"
	"persona/libs/database/ent/userschema"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProfileSchema is the model entity for the ProfileSchema schema.
type ProfileSchema struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProfileSchemaQuery when eager-loading is set.
	Edges               ProfileSchemaEdges `json:"edges"`
	user_schema_profile *int
	selectValues        sql.SelectValues
}

// ProfileSchemaEdges holds the relations/edges for other nodes in the graph.
type ProfileSchemaEdges struct {
	// Owner holds the value of the owner edge.
	Owner *UserSchema `json:"owner,omitempty"`
	// Photo holds the value of the photo edge.
	Photo *PhotoSchema `json:"photo,omitempty"`
	// Phone holds the value of the phone edge.
	Phone *PhoneSchema `json:"phone,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProfileSchemaEdges) OwnerOrErr() (*UserSchema, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: userschema.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// PhotoOrErr returns the Photo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProfileSchemaEdges) PhotoOrErr() (*PhotoSchema, error) {
	if e.loadedTypes[1] {
		if e.Photo == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: photoschema.Label}
		}
		return e.Photo, nil
	}
	return nil, &NotLoadedError{edge: "photo"}
}

// PhoneOrErr returns the Phone value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProfileSchemaEdges) PhoneOrErr() (*PhoneSchema, error) {
	if e.loadedTypes[2] {
		if e.Phone == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: phoneschema.Label}
		}
		return e.Phone, nil
	}
	return nil, &NotLoadedError{edge: "phone"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProfileSchema) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case profileschema.FieldID:
			values[i] = new(sql.NullInt64)
		case profileschema.ForeignKeys[0]: // user_schema_profile
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProfileSchema fields.
func (ps *ProfileSchema) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case profileschema.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ps.ID = int(value.Int64)
		case profileschema.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_schema_profile", value)
			} else if value.Valid {
				ps.user_schema_profile = new(int)
				*ps.user_schema_profile = int(value.Int64)
			}
		default:
			ps.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProfileSchema.
// This includes values selected through modifiers, order, etc.
func (ps *ProfileSchema) Value(name string) (ent.Value, error) {
	return ps.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the ProfileSchema entity.
func (ps *ProfileSchema) QueryOwner() *UserSchemaQuery {
	return NewProfileSchemaClient(ps.config).QueryOwner(ps)
}

// QueryPhoto queries the "photo" edge of the ProfileSchema entity.
func (ps *ProfileSchema) QueryPhoto() *PhotoSchemaQuery {
	return NewProfileSchemaClient(ps.config).QueryPhoto(ps)
}

// QueryPhone queries the "phone" edge of the ProfileSchema entity.
func (ps *ProfileSchema) QueryPhone() *PhoneSchemaQuery {
	return NewProfileSchemaClient(ps.config).QueryPhone(ps)
}

// Update returns a builder for updating this ProfileSchema.
// Note that you need to call ProfileSchema.Unwrap() before calling this method if this ProfileSchema
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *ProfileSchema) Update() *ProfileSchemaUpdateOne {
	return NewProfileSchemaClient(ps.config).UpdateOne(ps)
}

// Unwrap unwraps the ProfileSchema entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *ProfileSchema) Unwrap() *ProfileSchema {
	_tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProfileSchema is not a transactional entity")
	}
	ps.config.driver = _tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *ProfileSchema) String() string {
	var builder strings.Builder
	builder.WriteString("ProfileSchema(")
	builder.WriteString(fmt.Sprintf("id=%v", ps.ID))
	builder.WriteByte(')')
	return builder.String()
}

// ProfileSchemas is a parsable slice of ProfileSchema.
type ProfileSchemas []*ProfileSchema
