// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"persona/libs/database/ent/roleschema"
	"persona/libs/database/ent/userschema"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// RoleSchema is the model entity for the RoleSchema schema.
type RoleSchema struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoleSchemaQuery when eager-loading is set.
	Edges             RoleSchemaEdges `json:"edges"`
	user_schema_roles *int
	selectValues      sql.SelectValues
}

// RoleSchemaEdges holds the relations/edges for other nodes in the graph.
type RoleSchemaEdges struct {
	// User holds the value of the user edge.
	User *UserSchema `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoleSchemaEdges) UserOrErr() (*UserSchema, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: userschema.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RoleSchema) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case roleschema.FieldID:
			values[i] = new(sql.NullInt64)
		case roleschema.ForeignKeys[0]: // user_schema_roles
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RoleSchema fields.
func (rs *RoleSchema) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case roleschema.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rs.ID = int(value.Int64)
		case roleschema.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_schema_roles", value)
			} else if value.Valid {
				rs.user_schema_roles = new(int)
				*rs.user_schema_roles = int(value.Int64)
			}
		default:
			rs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RoleSchema.
// This includes values selected through modifiers, order, etc.
func (rs *RoleSchema) Value(name string) (ent.Value, error) {
	return rs.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the RoleSchema entity.
func (rs *RoleSchema) QueryUser() *UserSchemaQuery {
	return NewRoleSchemaClient(rs.config).QueryUser(rs)
}

// Update returns a builder for updating this RoleSchema.
// Note that you need to call RoleSchema.Unwrap() before calling this method if this RoleSchema
// was returned from a transaction, and the transaction was committed or rolled back.
func (rs *RoleSchema) Update() *RoleSchemaUpdateOne {
	return NewRoleSchemaClient(rs.config).UpdateOne(rs)
}

// Unwrap unwraps the RoleSchema entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rs *RoleSchema) Unwrap() *RoleSchema {
	_tx, ok := rs.config.driver.(*txDriver)
	if !ok {
		panic("ent: RoleSchema is not a transactional entity")
	}
	rs.config.driver = _tx.drv
	return rs
}

// String implements the fmt.Stringer.
func (rs *RoleSchema) String() string {
	var builder strings.Builder
	builder.WriteString("RoleSchema(")
	builder.WriteString(fmt.Sprintf("id=%v", rs.ID))
	builder.WriteByte(')')
	return builder.String()
}

// RoleSchemas is a parsable slice of RoleSchema.
type RoleSchemas []*RoleSchema
