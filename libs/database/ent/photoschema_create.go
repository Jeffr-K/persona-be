// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"persona/libs/database/ent/photoschema"
	"persona/libs/database/ent/profileschema"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PhotoSchemaCreate is the builder for creating a PhotoSchema entity.
type PhotoSchemaCreate struct {
	config
	mutation *PhotoSchemaMutation
	hooks    []Hook
}

// SetOwnerID sets the "owner" edge to the ProfileSchema entity by ID.
func (psc *PhotoSchemaCreate) SetOwnerID(id int) *PhotoSchemaCreate {
	psc.mutation.SetOwnerID(id)
	return psc
}

// SetOwner sets the "owner" edge to the ProfileSchema entity.
func (psc *PhotoSchemaCreate) SetOwner(p *ProfileSchema) *PhotoSchemaCreate {
	return psc.SetOwnerID(p.ID)
}

// Mutation returns the PhotoSchemaMutation object of the builder.
func (psc *PhotoSchemaCreate) Mutation() *PhotoSchemaMutation {
	return psc.mutation
}

// Save creates the PhotoSchema in the database.
func (psc *PhotoSchemaCreate) Save(ctx context.Context) (*PhotoSchema, error) {
	return withHooks(ctx, psc.sqlSave, psc.mutation, psc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (psc *PhotoSchemaCreate) SaveX(ctx context.Context) *PhotoSchema {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psc *PhotoSchemaCreate) Exec(ctx context.Context) error {
	_, err := psc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psc *PhotoSchemaCreate) ExecX(ctx context.Context) {
	if err := psc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psc *PhotoSchemaCreate) check() error {
	if _, ok := psc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "PhotoSchema.owner"`)}
	}
	return nil
}

func (psc *PhotoSchemaCreate) sqlSave(ctx context.Context) (*PhotoSchema, error) {
	if err := psc.check(); err != nil {
		return nil, err
	}
	_node, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	psc.mutation.id = &_node.ID
	psc.mutation.done = true
	return _node, nil
}

func (psc *PhotoSchemaCreate) createSpec() (*PhotoSchema, *sqlgraph.CreateSpec) {
	var (
		_node = &PhotoSchema{config: psc.config}
		_spec = sqlgraph.NewCreateSpec(photoschema.Table, sqlgraph.NewFieldSpec(photoschema.FieldID, field.TypeInt))
	)
	if nodes := psc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   photoschema.OwnerTable,
			Columns: []string{photoschema.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profileschema.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.profile_schema_photo = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PhotoSchemaCreateBulk is the builder for creating many PhotoSchema entities in bulk.
type PhotoSchemaCreateBulk struct {
	config
	builders []*PhotoSchemaCreate
}

// Save creates the PhotoSchema entities in the database.
func (pscb *PhotoSchemaCreateBulk) Save(ctx context.Context) ([]*PhotoSchema, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pscb.builders))
	nodes := make([]*PhotoSchema, len(pscb.builders))
	mutators := make([]Mutator, len(pscb.builders))
	for i := range pscb.builders {
		func(i int, root context.Context) {
			builder := pscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PhotoSchemaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pscb *PhotoSchemaCreateBulk) SaveX(ctx context.Context) []*PhotoSchema {
	v, err := pscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pscb *PhotoSchemaCreateBulk) Exec(ctx context.Context) error {
	_, err := pscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pscb *PhotoSchemaCreateBulk) ExecX(ctx context.Context) {
	if err := pscb.Exec(ctx); err != nil {
		panic(err)
	}
}
